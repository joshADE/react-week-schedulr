{"version":3,"sources":["../../src/components/EventRootComponent/DefaultEventRootComponent.tsx","../../src/components/Cell/Cell.tsx","../../src/utils/getSpan.ts","../../src/utils/utility.ts","../../src/utils/createGrid.ts","../../src/components/EventContent/EventContent.tsx","../../src/components/RangeBox/RangeBox.tsx","../../src/components/Schedule/Schedule.tsx","../../src/utils/createMapCellInfoToRecurringTimeRange.ts","../../src/utils/cellToDate.ts","../../src/utils/mergeEvents.ts","../../src/components/Bounds/Bounds.tsx","../../src/components/WeekScheduler/WeekScheduler.tsx","../../src/utils/createMapDateRangeToCells.ts","../../src/utils/getEarliestTimeRange.ts","App.tsx","index.tsx"],"names":["DefaultEventRootComponent","props","React","ref","Cell","children","style","top","rect","left","width","height","className","styles","cell","onClick","getSpan","x1","x2","clamp","num","min","max","range","from","to","result","i","differenceInDays","end","start","asDays","moment","Math","differenceInMinutes","EventContent","isEnd","isStart","dateRange","memo","eventRootComponent","EventRootComponent","eventContentComponent","useRef","useState","originalRect","useMemo","grid","useEffect","setModifiedCell","modifiedDateRange","cellInfoToDateRange","isActive","getIsActive","cellIndex","rangeId","id","handleStop","useCallback","setModifying","checkValidDateRange","onChange","modifiedCell","tempCell","details","handleStart","setTempCell","handleDrag","x","moveAxis","event","newRect","startOrEnd1","startOrEnd2","newTop","newBottom","newLeft","newRight","startX","newCell","endX","startY","endY","invariant","handleResize","delta","maxHeight","cellHeight","cellPrecisionHeight","newSize","console","direction","spanY","isResizable","handleDelete","undefined","disableDelete","handleOnFocus","onActiveChange","handleOnClick","eventContentProps","cellArray","type","originalHeight","axis","bounds","bottom","right","position","y","onStart","onDrag","onStop","handle","tabIndex","role","onFocus","rangeIndex","isModifying","isMovable","size","key","length","onResizeStart","onResize","onResizeStop","handleWrapperClass","enable","handleClasses","bottomLeft","bottomRight","topLeft","topRight","Object","e","dateRangeToCells","entryIndex","entries","isDeletable","createMapCellInfoToRecurringTimeRange","fromY","fromX","originDate","startDate","toMin","cellToDate","toDay","endDate","compareAsc","range1","range2","mergeEvents","event1","event2","startOfWeek","closedDaysTimes","cdtIndex","hours","h","rangesOverlap","rangeA","isBefore","rangeB","isAfter","daysOfWeek","toX","days","visualGridVerticalPrecision","verticalPrecision","defaultHours","maxVerticalPrecision","cellClickPrecision","numVerticalCells","numVisualVerticalCells","times","schedulerRef","parentRef","root","useComponentSize","toY","mins","setDimensions","endOfWeek","originOfThisDay","_startX","_startY","_endX","_endY","cells","spanX","createMapDateRangeToCells","numHorizontalCells","cellInfoToDateRanges","cellInfoToSingleDateRange","rest","JSON","maxRangeHeightSpan","totalHeight","totalWidth","cellWidth","maxRectHeight","getRectFromCell","this","getCellFromRect","dragging","data","createGrid","dayOfWeek","isWithinInterval","closedDayTime","allEvents","value","dynamicEvents","staticEvents","handleEventChange","newEvents","isEqual","newEventDetails","onChangeDynamicEvents","activeCellIndex","document","scrollIntoView","scrollMode","block","inline","wasInitialScrollPerformed","events","ed","setDay","startA","startB","addHours","setWasInitialScrollPerformed","handleBlur","setActive","handleCellClick","newEventsAddedTo","precisionedTimeIndex","timeIndex","dayIndex","dateRanges","generateEvent","onChangeStaticEvents","baseRect","onBlur","onEventClick","dynamic","static","calendar","timeline","header","EventRoot","forwardRef","arrow","interactive","disabled","hideOnClick","content","renderContent","textAlign","title","format","eventDetails","String","random","initialDynamicEvents","Date","initialStaticEvents","2","weeks","App","getFullYear","currentYear","setCurrentYear","getMonth","currentMonth","setCurrentMonth","ceil","getDate","getDay","currentWeek","setCurrentWeek","setEvents","setStaticEvents","addMonth","amount","current","val","N","newval","clampWrapInclusive","originDay","add","toDate","map","element","index","eventsOverlap","ReactDOM","render","getElementById"],"mappings":"wlBAKaA,EAA6B,SACtC,gBAAsC,SAAmC,EAAnC,KACtC,SADsC,EACtC,aADsC,EACtC,GADsC,EACtC,UADsC,EACtC,WADsC,EACtC,cADsC,EACtC,KADsC,IASjCC,EATiC,iBActC,OAAOC,uCAAKC,IAAKA,GAAjB,Q,guDCRSC,EAA4B,SAAC,GAAD,IAAC,EAAD,EAAC,OAAD,EAAC,QAGxCC,EAHuC,EAGvCA,SAEA,OACE,yBACEC,MAAO,CACLC,IAAG,OAAEC,QAAF,IAAEA,OAAF,EAAEA,EADA,IAELC,KAAI,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAFD,KAGLE,MAAK,OAAEF,QAAF,IAAEA,OAAF,EAAEA,EAHF,MAILG,OAAM,OAAEH,QAAF,IAAEA,OAAF,EAAEA,EAAMG,QAEhBC,UAAWC,EAAOC,KAClBC,QAASA,GATb,IChBWC,EAAU,SAACC,EAAD,UAAiCC,EAAjD,EAA4C,G,SCEnCC,EAAMC,EAAaC,EAAaC,GAC5C,OAAOF,OAAmBA,OAA1B,EAeJ,SAAgBG,EAAMC,EAAcC,GAEhC,IADA,IAAMC,EAAN,GACSC,EAAT,EAAmBA,EAAnB,EAA2BA,IACvBD,UAEJ,SAGJ,SAAgBE,EAAiBC,EAAWC,GACxC,IACMC,EADWC,aAAgBA,2BAAgCA,eAAjE,SACA,SACA,OAAOC,WAAP,GAGJ,SAAgBC,EAAoBL,EAAWC,GAE3C,OADiBE,aAAgBA,YAAiBA,IAAlD,KACA,YC7BG,ICYMG,EAAe,UAAW,SAAsB,GAAtB,IAAsB,EAAtB,EAAsB,QAAtB,EAAsB,SAAtB,EAAsB,YAAtB,EAAsB,QAK7DC,EALuC,EAKvCA,MAIA,OACI,yBACA9B,MAAO,CAAEI,QAAOC,UAChBC,UAAWC,EAAO,kBAElB,0B,iBAAkBD,UAAWC,EAAOiB,OAC/BO,GAAWL,IAAOM,EAAPN,WALhB,QAOCK,MAAoBnC,8BAPrB,OAQA,0B,iBAAkBU,UAAWC,EAAOgB,KAC/BO,GAASJ,IAAOM,EAAPN,WAVlB,YCgSA,EAAeO,gBAnSiD,SAAC,GAAD,IAAC,EAAD,EAAC,OAAD,EAAC,OAAD,EAAC,KAAD,EAAC,YAAD,EAAC,aAAD,EAAC,UAAD,EAAC,WAAD,EAAC,sBAAD,EAAC,WAAD,EAAC,sBAAD,EAAC,YAAD,EAAC,cAAD,EAAC,YAAD,EAAC,iBAAD,EAAC,UAAD,EAAC,cAAD,EAAC,gBAAD,EAAC,OAAD,EAAC,UAAD,IAoB5DC,mBAAoBC,OApBwC,MAAC,EAAD,EAqB5DC,EArB4D,EAqB5DA,sBAEMvC,EAAMwC,iBAAZ,MACA,EAAwCC,mBAAxC,sBAAM,EAAN,KAAM,EAAN,KACA,EAAgCA,mBAAhC,sBAAM,EAAN,KAAM,EAAN,KACA,EAAoCA,oBAApC,sBAAM,EAAN,KAAM,EAAN,KACMC,EAAeC,mBAAQ,kBAAMC,kBAAP,KAAmC,CAACjC,EAAhE,IACMN,EAAOsC,mBAAQ,kBAAMC,kBAAP,KAA2C,CAAC,EAAhE,IAMAC,qBAAU,WACRC,OACC,CAFHD,IAIA,IAAME,EAAoBJ,mBAAQ,kBAAMK,EAAP,KAA0C,CAAC,EAA5E,IAKMC,EAAWN,mBAAQ,kBAAMO,EAAY,CAAEC,YAAWC,QAASC,MAAO,CAAC,EAAD,EAAxE,IAOQC,EAAaC,uBAAY,WAC7BC,MACA,IAMMC,EAAoBJ,EAAIL,EAA5B,IAGEU,EAAS,8BAAD,IAActC,MAAO4B,EAAoBW,KAAjDD,GAEAZ,QAGD,CAACc,EAAUD,EAAcb,EAAiBO,EAAIQ,EAASb,EAAqBU,EAAUD,EAhB3F,IAkBQK,EAAcP,uBAAY,WAG9BC,MACAO,OAGG,CAACJ,EAAcI,EAPpB,IAUEC,EAAoCT,uBACtC,kBAAQ,EAAR,EAAQ,EAAKU,EAAb,EAAaA,EACX,YAAIC,EAAJ,CAIAC,mBACAA,oBAEA,IAAMC,EAAU,eACX/D,GAGL,GAAI6D,YAAJ,MAA2BA,EAAkB,CAC3C,IAAMG,EAAN,EACMC,EAAcD,EAAchE,EAAlC,OACMkE,EAASzC,WAAf,GACM0C,EAAYD,EAASlE,EAA3B,OACA+D,WACAA,QAGF,GAAIF,YAAJ,MAA2BA,EAAkB,CAC3C,IAAMG,EAAN,EACMC,EAAcD,EAAchE,EAAlC,MACMoE,EAAU3C,WAAhB,GACM4C,EAAWD,EAAUpE,EAA3B,MACA+D,UACAA,SAGF,MAA2BxB,kBAA3B,GAAM,EAAN,EAAM,OAAU+B,EAAhB,EAAgBA,OAEVC,EAAU,8BAAH,IAEXD,OAAQT,QAAmBvD,EAAnBuD,OAFM,EAGdW,KAAMX,kBAAoBA,EAAsBS,EAAShE,EAATgE,MAA1CT,EAAoEvD,EAH5D,KAIdmE,OAAQZ,QAAmBvD,EAAnBuD,OAJM,EAKda,KAAMb,kBAAoBA,EAAsBY,EAASnE,EAATmE,MAA1CZ,EAAoEvD,EAAKoE,OAGjFC,IACEJ,UAAkBjE,EAAlBiE,OAAgCA,UAAkBjE,EADpDqE,MAAS,8DAKTlC,KACAU,SAEF,CAACZ,EAAMvC,EAAM6D,EAAUvD,EAAMmC,EAjDjC,IAsDQmC,GAA+B1B,uBACnC,kBACE,OAIAY,mBACAA,oBAEA,IAAIe,UAAJ,CAIA,IAAMC,EAAYvC,EAAlB,cACMwC,EAAaxC,EAAnB,WACMyC,EAAsBzC,cAAmBA,EAA/C,iBAEM0C,EAAU,CACd9E,OAAQ0E,SAAe7E,EADT,OAEdE,MAAO2E,QAAc7E,EAAKE,OAGtB6D,EAAU,8BAEXkB,GAGLC,eAGIC,WAAJ,OAKEpB,MAAcpD,EAAMoD,MAAcc,EAAf,OAA4Bd,WAA5B,EAAoEA,WAAvFA,GACSoB,WAAJ,YACLpB,UAAkBc,EAAlBd,QAGF,MAAgCxB,kBAAhC,GAAM,EAAN,EAAM,QAAN,EAAM,OAAiBmC,EAAvB,EAAuBA,KACjBH,EAAU,8BAAH,IAEXa,QACAX,SACAC,SAIFjC,QAGF,CAACF,EAAMvC,EAAMyC,EAAiB4C,EAAa/E,EApD7C,IAuDMgF,GAAepC,uBAAY,WAC1BG,IAAL,GAIAA,OAASkC,EAATlC,KACC,CAACA,EAAUmC,EANd,IAQMC,GAAgBvC,uBAAY,WAChC,GAIAwC,EAAe,CAAC1C,EAAhB0C,MACC,CAACA,EAAgB1C,EANpB,IAQM2C,GAAgBzC,uBAAY,WAC3B3C,GAAL,GAIAA,EAAQ,CAACyC,EAATzC,MACC,CAACA,EAASyC,EAAIJ,EANjB,IAUI,GAAN,EAAM,OAAN,EAAM,QAAN,EAAM,MAAoBzC,GAA1B,EAA0BA,OACpByF,GAAuC,CAC3C1F,SACAC,UACA2B,UAH2C,EAI3CD,QAJ2C,IAIlCiB,EACTlB,MAAOkB,IAAc+C,SALsB,EAM3C7C,KACAF,YACAU,UACAsC,QAEI,GAAN,EAAO/F,IAAD,GAAN,EAAyBE,KAAnB,GAAN,EAA6CC,MAA8B6F,GAA3E,EAAmE5F,OAC/D,OAAQ,6BACJ,uBACI6F,KAAMnC,EACNoC,OAAQ,CACJlG,IADI,EAEJmG,OAAQ3D,cAFJ,GAGJtC,KAHI,EAIJkG,MAAO5D,aAAkBrC,IAE7BkG,SAAU,CAAExC,EAAF,GAAWyC,EAAGtG,IACxBuG,QAAS7C,EACT8C,OAAQ5C,EACR6C,OAAQvD,EACRwD,OAAM,WAAMpG,EAAO,iBAGjB,qBACEqG,SAAS,IACTC,KAAK,SACLnB,cAAeA,EACfoB,QAASnB,GACTlF,QAASoF,GACTL,aAAcA,GACdxC,UAAWA,EACX+D,WAAYA,EACZ7D,GAAIA,EACJJ,SAAUA,EACVjD,IAAKA,EACLS,UAAS,UAAKC,EAAO,aAAZ,YAA4BA,EAAOyD,MAAnC,YAA4CgD,EAAazG,EAAF,UAAoB,GAA3E,YAAiFuC,EAAUvC,EAAF,OAAiB,GAA1G,YAAgHD,GACzHN,MAAO,CAAEI,SAAOC,WAChB2F,KAAMA,GAEPiB,GAAa,yBAAK3G,UAAWC,EAAO,iBACvC,uBACE2G,KAAM,CAAC9G,SAAOC,WACd8G,IAAG,UAAKJ,EAAL,YAAmB/D,EAAnB,YAAgC+C,EAAUqB,OAA1C,YAAoD7E,EAAatC,IAAjE,YAAwEsC,EAAapC,MACxFkH,cAAe1D,EACf2D,SAAUxC,GACVyC,aAAcpE,EACdqE,mBAAoBjH,EAAO,kBAC3BkH,OAAQlC,EAAa,CAAEtF,KAAF,EAAamG,QAAQ,GAAO,GACjDsB,cAAe,CACbtB,OAAQ,GAAF,OAAK7F,EAAOoG,OAAZ,YAAsBpG,EADf,QAEboH,WAAYpH,EAFC,OAGbqH,YAAarH,EAHA,OAIbJ,KAAMI,EAJO,OAKb8F,MAAO9F,EALM,OAMbN,IAAK,GAAF,OAAKM,EAAOoG,OAAZ,YAAsBpG,EANZ,KAObsH,QAAStH,EAPI,OAQbuH,SAAUvH,EAAOoG,SAGlBvE,EACDA,EADsB,IAEtBxC,qCAtDF,QA6DHoH,GAAe,yBAAK1G,UAAWC,EAAO,sBAAuBP,MAAO,CAAEC,IAAF,GAAoBE,KAApB,GAAwCC,MAAxC,GAA8DC,OAAQ4F,UC/NvJ,EAAehE,gBAxDiD,SAAC,GAAD,IAAC,EAAD,EAAC,SAAD,EAAC,YAAD,EAAC,mBAAD,EAAC,OAAD,EAAC,WAAD,EAAC,WAAD,EAAC,sBAAD,EAAC,sBAAD,EAAC,cAAD,EAAC,cAAD,EAAC,iBAAD,EAAC,UAAD,EAAC,cAAD,EAAC,gBAAD,EAAC,qBAAD,EAAC,wBAAD,EAAC,KAkB7D3B,EAlB4D,EAkB5DA,UAEI,OACA,yBAAKA,UAAWC,EAAO,gBAEfwH,uBAA2B,uBAC3B,0BAAMzH,UAAWC,EAAO,wBAAyB4G,IAAKa,EAAE,IACnDC,EAAiBD,KAAjB,YAAiC,uBAClC,qBACIb,IAAG,UAAKe,EAAL,YAAmBC,EAAQf,OAA3B,YAAqCpE,EAArC,YAAkD+C,EAAUqB,QAC/D5G,KAAMA,EACNiC,KAAMA,EACNS,GAAI8E,EAAE,GACNtE,QAASsE,EAAE,GACXzE,SAAUA,EACVQ,SAAUA,EACVlB,oBAAqBA,EACrBS,oBAAqBA,EACrByD,WAAYmB,EACZlF,UAAWA,EACX+C,UAAWA,EACXR,YAAaA,EACb6C,YAAaA,EACbnB,UAAWA,EACXrB,eAAgBA,EAChBnF,QAASA,EACTsC,YAAaA,EACb2C,cAAeA,EACftD,sBAAuBA,EACvBF,mBAAoBA,EACpB8D,KAAMA,EACN1F,UAAWA,eCxEtB+H,EAAgE,SAAC,GAAD,IAAC,EAAD,EAC3EC,MAD4E,EAAD,EAE3EC,MACAC,EAH2E,EAG3EA,WAH2E,OAIvE,gBAAC,EAAD,EAAC,SAAD,EAAC,SAAD,EAAC,KAAwBlD,EAAzB,EAAyBA,MAuB7B,OAtBe,EAAMd,EAAQE,EAAd,QACRrD,YACH,IAAMoH,ECZc,SAAC,GAAD,IAAC,EAAD,EAAC,SAAD,EAAC,SAAD,EAAC,MAIvBD,EAJsB,EAItBA,WAJsB,OAWpB9G,yBAA2CgH,EAA3ChH,GAXC,WDYiBiH,CAAW,CAC3BnE,OAD2B,EAE3BG,SACA+D,QACAE,QACAJ,eAEIK,EAAUnH,QACdA,WAAsBgH,EAAtBhH,GADcA,WAEdA,aAFF,QASA,OAJyBA,mBACrB,CAAC+G,EAAD,SAAqBI,EADAnH,UAErB,CAACmH,EAAD,SAAmBJ,EAFvB,aAdW,MAoBP,qBAAqBK,YAAWC,EAAD,GAAYC,EApBnD,S,SEXcC,EACdC,EACAC,GAGA,SAIA,OAAIA,EACF,EAGF,2BAAO,GAAeA,GAPpB,GCKJ,IAgDA,EAAelH,gBAhDuB,SAAC,GAAD,IAAC,EAAD,EAAC,OAAD,EAAC,QAAD,EAAC,kBAAD,EAAC,iBAKnCmH,EALkC,EAKlCA,YAGA,OACI,yBAAK9I,UAAWC,EAAO4F,QAClBkD,GAAmBA,EAAA,KAAoB,qBACxC,0BAAM/I,UAAWC,EAAO,6BAA8B4G,IAAKmC,GAC1DrB,EAAA,QAA0B,gBACnB,MAAqCxF,kBAArC,GAAM,EAAN,EAAM,OAAN,EAAM,MAAN,EAAM,MAAoBpC,EAA1B,EAA0BA,OAE1B,OAAO,yBACHC,UAAS,UAAKC,EAAO,aAAZ,YAA4BA,EAAO,oBAC5CP,MAAO,CAACG,OAAMF,MAAKG,QAAOC,UAC1B8G,IAAG,UAAKnE,EAAL,YAAkB+C,EAAUqB,iBAK1CmC,GAASxB,OAAA,gBAA0ByB,YAAC,OACrC,0BAAMlJ,UAAWC,EAAO,mBAAoB4G,IAAKqC,EAAE,IAElDvB,EAAiB,CAACmB,cAAwBI,EAAxBJ,0BAAD,SAAgEA,EAAA,YAAwBI,EAAxB,eAA0C,CAAC,KAAOA,QAAR,WAA4B,OAASA,QAArC,aAA2D,OAASA,uBAA/L,gBAAqO,gBAClO,MAAqC/G,kBAArC,GAAM,EAAN,EAAM,OAAN,EAAM,MAAN,EAAM,MAAoBpC,EAA1B,EAA0BA,OAE1B,OAAO,yBACHC,UAAS,UAAKC,EAAO,aAAZ,YAA4BA,EAAOgJ,OAC5CvJ,MAAO,CAACG,OAAMF,MAAKG,QAAOC,UAC1B8G,IAAG,gBAAWqC,EAAE,GAAb,YAAmBxG,EAAnB,YAAgC+C,EAAUqB,aAEpDa,EAAiB,CAACmB,EAAA,YAAwBI,EAAxB,eAA0C,CAAC,KAAOA,QAAR,WAA4B,OAASA,QAArC,aAA2D,OAASA,uBAA/G,SAAgJJ,cAAwBI,EAAxBJ,wBAAjK,gBAAmO,gBAChO,MAAqC3G,kBAArC,GAAM,EAAN,EAAM,OAAN,EAAM,MAAN,EAAM,MAAoBpC,EAA1B,EAA0BA,OAE1B,OAAO,yBACHC,UAAS,UAAKC,EAAO,aAAZ,YAA4BA,EAAOgJ,OAC5CvJ,MAAO,CAACG,OAAMF,MAAKG,QAAOC,UAC1B8G,IAAG,cAASqC,EAAE,GAAX,YAAiBxG,EAAjB,YAA8B+C,EAAUqB,qBCsD/D,IAAMqC,EAAgB,SAACC,EAAD,GACpB,OAAOC,YAASD,EAAD,GAAYE,EAApBD,KAAkCE,YAAQH,EAAD,GAAYE,EAA5D,KAGWE,EAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAnC,GAGDlB,EAAS9E,YAAD,OADd,EACqCA,GAC/BiG,EAAOC,YAAD,OAA0BA,EAFtC,GAqlBA,EAAe/H,gBAjlBqC,SAAC,GAmEnD,IAnEkD,QAClDuG,kBADkD,MACrC,IADsC,KAAD,EAAC,EAAD,EAAC,QAAD,EAAC,SAAD,EAAC,YAAD,EAAC,WAAD,IAMlDyB,mCANkD,MAAC,IAAD,MAOlDC,yBAPkD,MAAC,GAAD,MAQlDC,oBARkD,MAQnC,CAAC,EARmC,IAAD,MASlDC,4BATkD,MALtB,KAKsB,MAUlDC,0BAVkD,MAAC,EAAD,EAAC,EAAD,EAAC,gBAAD,EAAC,eAAD,EAAC,uBAAD,EAAC,wBAAD,EAAC,mBAAD,EAAC,iBAAD,EAAC,iBAAD,EAAC,iBAAD,EAAC,SAAD,EAAC,mBAAD,EAAC,gBAAD,EAAC,sBAuBnDnI,GAvBkD,EAuBlDA,mBAKMoI,GAjCsB,KAiC5B,EAEMC,GAnCsB,KAmC5B,EAEMC,GAAN,GACMC,GAAepI,iBAArB,MACMqI,GAAYrI,iBAAlB,MACMsI,GAAOtI,iBAAb,MACA,GAAmDC,mBAAS,CAAC,EAA7D,iDAAO,GAAP,MAAM,GAAN,MAAM,GAAN,MAEM4E,GAAO0D,IAAb,IAUMlC,GAAQtF,uBACXmD,YAAD,OACGA,EAAD,GACC2D,EAHoB,KAIvB,CAAC,EAJH,IAMMW,GAAMzH,uBACT0H,YAAD,OACGA,EAAD,GACCZ,EAHkB,KAIrB,CAAC,EAJH,IAaS7I,GAAT,EAAgBA,GAAhB,GAA4CA,KAC1CmJ,YAKF9H,qBACE,WACO+H,GAAL,QAKAM,GAAc,CAACN,WAAD,aAAoCA,WAAlDM,cAJEA,GAAc,CAAC,EAAfA,MAMJ,CAAC7D,GATHxE,KAcA,IAAM0G,GAAc5G,mBAClB,kBAAMd,uBADmB,UAEzB,CAFF,IAIMsJ,GAAYtJ,qBAAlB,QAQMuG,GAAmBzF,mBAAQ,WAC/B,OCpNqC,SAAC,GAAD,QACvCuH,WADuC,MAChCjG,YAAD,OADkC,GAAD,EAAC,EAAD,EAAC,MAAD,EAAC,iBAIxC0E,EAJuC,EAIvCA,WAJuC,OAWnC,mCAAC,EAAD,YACEyC,EAAkBvJ,eAAxB,OAIMwJ,EAAUnB,EAAIzI,EAAiBE,EAArC,IACM2J,EAAUN,EAAIjJ,EAAoBJ,EAAOyJ,EAA/C,WACMG,EAAQrB,EAAIzI,EAAiBC,EAAnC,IACM8J,EAAQR,EAAIjJ,EAAoBL,EAAKG,sBAA7BmJ,WAAd,EAEIS,EAAQ,EAAMJ,EAASE,EAAf,QAA8B/J,YACxC,IAIMsD,EAFUtD,IAAhB,EAEA,EAA0B,EACpBuD,EAFQvD,IAAd,EAEA,EAAsBiJ,EAAT,EAIb,MAAO,CACL9F,OAVF,EAWEG,SACAD,KAXF,EAYEE,OACA2G,MARY7K,EANd,EACA,GAcE4E,MARY5E,EAAQiE,EAAtB,OAoBF,OARIjD,cAAmBA,eAAvB,SACE4J,QAKFA,EAAQA,UAAa,gBAAC,EAAD,EAAC,OAAU5G,EAAX,EAAWA,KAAX,OAAuBF,MAAeA,GAAhB,GAAiCE,MAAaA,GAAzF4G,MDqKSE,CAA0B,CAC/BhD,WAAYY,GADmB,SAE/BkB,iBAF+B,GAG/BmB,mBA1EuB,EA2EvB1B,MACAc,WAED,CAACA,GAAKN,GA9EkB,EAsE3B,KAUMmB,GAAuBlJ,mBAAQ,WACnC,OAAO6F,EAAsC,CAC3CG,WAAYY,GAD+B,SAE3Cd,MAF2C,GAG3CC,MAAOK,MAER,CAACF,GANJ,KAQMiD,GAA4BvI,uBAC/B5C,YACC,MAAyBkL,GAAzB,oBAAM,EAAN,KAAM,EAAN,WAQA,OAPA7G,IAAS,IACP+G,SADO,oFAGLA,EAAKxE,OAHA,uCAIwByE,kBAJxB,cAImDA,eAJ5DhH,KAOA,IAEF,CAZF,KAkBMiH,GAAqBtJ,mBAAQ,WAEjC,OAAOqI,GAAP,KAEC,CAACA,GAJJ,IAOMpI,GAAOD,mBAAqB,WAChC,OAAIuJ,WAAJ,OAA4BC,GAC1B,KRhQoB,SAAC,GAAD,IAAC,EAAD,EAAC,cAAD,EAAC,aAAD,EAAC,mBAAD,EAAC,qBAAD,EAAC,uBAMvBF,EANsB,EAMtBA,mBASM7G,EAAa8G,EAAnB,EAEM7G,EAAsB6G,EAA5B,EACA,MAAO,CACLA,cACAC,aACA1B,mBACAmB,qBACAQ,UAPgBD,EAAlB,EAQE/G,aACAiH,cAAejH,EAPV,EASLkH,gBATK,SASU,GACb,IAAM,EAAN,EAAM,OAAN,EAAM,SAAN,EAAM,OAAN,EAAM,SAAN,EAAM,MAAqC7G,EAA3C,EAA2CA,MAQ3C,MAAO,CACLc,OARaxB,EAAOwH,KAAtB,WASEnM,IARU0E,EAASyH,KAArB,WASEjM,KARWqE,EAAS4H,KAAtB,UASE/F,MARY3B,EAAO0H,KAArB,UASE/L,OARaiF,EAAQ8G,KAAvB,WASEhM,MARYmL,EAAQa,KAAtB,UAWE5H,OAAQA,EAAS4H,KATZ,UAUL1H,KAAMA,EAAO0H,KAVR,UAWLzH,OAAQA,EAASyH,KAXZ,WAYLxH,KAAMA,EAAOwH,KAAKnH,aAItBoH,gBAlCK,SAkCU,OAEb,QAF0BC,EAAb,wDAIb,GACE9H,EAAS3D,EACPc,WAAW4K,OAAYH,KADX,aAGZX,EAHFjH,GAKAG,EACEhD,WAAW4K,MAAX5K,IACG4I,EAFL5F,GAGAD,EAAO7D,EACLc,WAAW4K,QAAaH,KADd,aAGVX,EAHF/G,GAKAE,EACEjD,YAAY4K,SAAD,GAAX5K,IACG4I,EAFL3F,KAIAJ,EAAS3D,EACPc,WAAW4K,OAAYH,KADX,aAGZX,EAHFjH,GAKAG,EACAhD,WAAW4K,MAAX5K,IACG4I,EAFH5F,GAGAD,EAAO7D,EACLc,WAAW4K,QAAaH,KADd,aAGVX,EAHF/G,GAKAE,EACEjD,WAAW4K,SAAX5K,IACG4I,EAFL3F,IAIF,IAAM2G,EAAQ1K,EAAMH,EAAQ8D,EAAT,KAAnB,GACMc,EAAQzE,EAAMH,EAAQiE,EAAT,GAAyB4F,EAAzB,EAAnB,GACA,MAAO,CACLgB,QACAjG,QACAd,SACAG,SACAD,OACAE,UQgKC4H,CAAW,CAChBT,YAAa9G,EAAYA,EAAF,GADP,GAEhB+G,WAAYC,EAxHW,EAwHAA,EAFP,GAGhBR,mBAzHuB,EA0HvBnB,oBACAC,0BACAuB,0BAED,CAACC,GAAaC,GA9HU,EA8HsB1B,GAAkBC,GAAwBuB,GAAoB7G,EAb/G,IAkBM3B,GAAsBF,uBAAY,cACtCgC,mCAEA,IAAMqH,EAAYzK,KAAlB,SAEA,GAAIuH,IAASA,GAAb,GAA8B,CAC5B,IAAM/H,EAAQ+H,MAAd,GACMhI,EAAMgI,MAAZ,GAGA,GAFA/H,cAAkBQ,KAAlBR,cAA8CQ,KAA9CR,WAAuEQ,KAAvER,WACAD,cAAgBS,KAAhBT,cAA4CS,KAA5CT,WAAqES,KAArET,YACKmL,YAAiB1K,EAAD,GAAe,CAAER,QAAOD,UAAWmL,YAAiB1K,EAAD,GAAe,CAAER,QAAOD,QAC9F,SAIJ,MACE,IAAI,IAAIF,EAAR,EAAeA,EAAIgI,GAAnB,OAA2ChI,IAAI,CAC7C,IAAMsL,EAAgBtD,GAAtB,GAEA,GAAII,EAAczH,EAAlB,GACE,SAKN,MAAmB,CACjB,IAAM4K,EAAN,GACA,GACCA,eAAS,YAAS7E,0BAAqC8E,YAAK,OAAIA,OAA9C9E,UAAmE8E,YAAK,OAAIA,EAA9FD,QAED,GACEA,eAAS,YAAS7E,0BAAoC8E,YAAK,OAAIA,OAA7C9E,UAAkE8E,YAAK,OAAIA,EAA7FD,QAEF,IAAI,IAAIvL,EAAR,EAAeA,EAAIuL,EAAnB,OAAqCvL,IAAI,CACvC,IAAQJ,EAAU2L,EAAlB,GAAQ3L,MACR,GAAIwI,EAAczH,EAAlB,GACE,UAKN,WACC,CAACuH,GAAOF,GAAiByD,EAAeC,EA1C3C,IAmEA,GAAsDzK,mBAEpD,CAAC,KAFH,oDAAO,GAAP,MAAM,GAAN,MAAM,GAAN,MAwCM0K,GAAoB5J,uBACxB,cAEE,GAAK0J,IAAL,GAKA,IAAMG,EAAY,eAAIH,GAEtB,KAEO,CACL,GACEI,YAAQC,QAAD,GAA2BF,WAAlCC,KACAA,YAAQC,QAAD,GAA2BF,WAFpC,IAIE,OAEFA,mBAROA,EAAP,GAYFG,UAnBEA,EAAsB,eAAC,EAAMD,MAqBjC,CAACL,EAzBH,IA4BM/J,GAAcK,uBAClB,gBAAC,EAAD,EAAC,QAAWJ,EAAZ,EAAYA,UACV,OAAOC,QAA6BD,IAApC,KAEF,CAACqK,GAJH,KAeA3K,qBACE,WACO4K,SAAL,eAIK3C,GAAD,SAAkBA,oBAAsB2C,SAA5C,gBAIAC,YAAeD,SAAD,cAAyB,CACrCE,WADqC,YAErCC,MAFqC,UAGrCC,OAAQ,cAGZ,CAACX,EAhBHrK,IAoBA,OAAkEJ,oBAAlE,wBAAM,GAAN,MAAM,GAAN,MAIAI,qBACE,WACE,IAAIiL,IAA8BhD,GAA9BgD,SAAJ,IAIA,IEncJC,EFmcU3M,EAAQgH,IEnclB2F,EFoc2B,8BAAqBb,GElczChF,sBAA0B8F,YAAE,OAAIA,EAAhC9F,eAA+C,qEACpDe,YAAWgF,YAAOC,EAAR,GAAoBD,YAAOE,EADhCjG,OAAP,IFkckE,CAC1DkG,YAAS,EAAY9D,EADqC,IAE1D8D,YAAS,EAAY9D,EAHzB,OAMMjK,EAAOuC,mBAAqBxB,EAAlC,IACM,EAAN,EAAM,IAAOmF,EAAb,EAAaA,OAETnG,OAAJ,IAAiBmG,GAKX,aAAcuE,GAApB,UAIAA,yBAEAuD,WAEF,CAAC,GAAD,WA5BFxL,KAuCA,IAAMyL,GAAsC/K,uBAC1CY,YACOA,kBAAsBsJ,SAA3B,gBACEc,GAAU,CAAC,KAAXA,SAGJ,CANF,KAUMC,GAAkBjL,uBACtB,qBAA0CY,YACxC,GAAKvB,IAAL,SAAa6L,EAAb,CAIA,IAAMhJ,EAAQuF,GAAd,GACM0D,EAAuBC,GAAatE,EAA1C,GACM1J,EAAO,CACXgE,OADW,EAEXG,OAFW,EAGXD,KAHW,EAIXE,KAAMU,EAJK,EAKXA,QACAiG,MAAO7K,EAAQ+N,EAAUA,IAGrBC,EAAahD,GAAnB,GAEIkC,EAAJ,GAEAc,WAAmB1M,YAAe4L,EAAS,8BAAee,GAAc,CAAE1N,MAAOe,QAE7EsB,GAAoB,GAAIoL,EAA5B,MAGE,YAAIJ,GACFlB,EAAsBnE,EAAY6D,EAAlCM,IAEF,WAAIkB,GACFM,EAAqB3F,EAAY8D,EAAjC6B,KAGJ5K,oBACAA,uBAEF,CAACvB,GAAM6L,EAAkBzD,GAAK,EAA9B,WApCF,IAyCMgE,GAAQ,OAAGpM,SAAH,IAAGA,QAAH,EAAGA,GAAA,gBAAsB,CACrC+B,OADqC,EAErCG,OAFqC,EAGrCD,KAHqC,EAIrCE,KAJqC,EAKrC2G,MALqC,EAMrCjG,MAAO,IAGT,OACE,yBAAKhF,UAAWC,EAAOoK,KAAM3K,MAAO,CAAEK,SAAQD,UAC5C,yBAAKE,UAAWC,EAAO,qBACrB,yBAAKD,UAAWC,EAAO,sBAAvB,YACY6I,UADZ,WACwC4B,UAH5C,OAME,yBAAK1K,UAAWC,EAAO,kBAAmBuO,OAAQX,IAChD,yBAAK7N,UAAWC,EAAO,mBAAoBV,IAAK8K,IAC9C,yBAAKrK,UAAWC,EAAO,mBAAoBV,IAAK4K,IAE7ChI,IACC,qBACEwF,iBAAkBA,GAClBxF,KAAMA,GACN8G,MAAOA,GACPF,gBAAiBA,GACjBD,YAAaA,KAsBhB3G,OACC,qBACEmL,OAAQd,EACR7F,WAAS,EACTgB,iBAAkBA,GAClBxF,KAAMA,GACNsB,SAAS,OACTwB,aAAW,EACX6C,aAAW,EACXvF,oBAAqB8I,GACrBpI,SAAUyJ,GACV1J,oBAAqBA,GACrBsC,eAAgBwI,GAChB3N,QAASsO,GACThM,YAAaA,GACb2C,cAAeA,GACftD,sBAAuBA,GACvBF,mBAAoBA,GACpB8D,KAAK,UACL1F,UAAWC,EAAOyO,UAiBrBvM,OACC,qBACEmL,OAAQb,EACR9E,iBAAkBA,GAClBxF,KAAMA,GACNsB,SAAS,OACTlB,oBAAqB8I,GACrBrI,oBAAqBA,GACrBsC,eAAgBwI,GAChB3N,QAASsO,GACThM,YAAaA,GACb2C,cAAeA,GACftD,sBAAuBA,GACvBF,mBAAoBA,GACpB8D,KAAK,SACL1F,UAAWC,EAAO0O,SAGtB,yBAAK3O,UAAWC,EAAO2O,SAAUrP,IAAK6K,IACnCZ,OAAgB2C,YAAD,OACd,yBAAKtF,IAAKsF,EAAWnM,UAAWC,EAAO,eACpCiK,GAAA,KAAWgE,YAAD,OACT,qBACEtO,KAAI,OAAEuC,SAAF,IAAEA,QAAF,EAAEA,GAAA,gBAAsB,CAC1B+B,OAD0B,EAE1BG,OAF0B,EAG1BD,KAAM+H,EAHoB,EAI1B7H,KAAM4J,EAJoB,EAK1BjD,MAL0B,EAM1BjG,MAAO,IAET6B,IAAKqH,EACL/N,QAAS4N,GAAgB,EAEvBG,GACGlE,GAHmB,KAKxBkE,UAAWA,aAUvB,yBAAKlO,UAAS,UAAKC,EAAO4O,SAAZ,YAAwB5O,EAAO,iBAC1CiK,QAAWgE,YAAD,OACT,yBACElO,UAAWC,EAAO,YAClBP,MAAO,CAAEK,OAAM,OAAEwO,SAAF,IAAEA,QAAF,EAAEA,GAAUxO,QAC3B8G,IAAKqH,GAEL,yBAAKlO,UAAWC,EAAO,eACpBmB,uBAEU8M,EAFV9M,UA1HX,eAmIE,yBAAKpB,UAAS,UAAKC,EAAO,cAAZ,YAA6BA,EAAO,gBAChD,yBAAKD,UAAWC,EAAO6O,QACrB,yBAAK9O,UAAWC,EAAO,iBAEtBuJ,OAAgB2C,YAAD,OACd,yBACEtF,IAAKsF,EACLnM,UAAWC,EAAO,cAClBP,MAAO,CAAEI,MAAK,OAAEyO,SAAF,IAAEA,QAAF,EAAEA,GAAUzO,QAEzBgJ,6BArJjB,uB,kDGphBIiG,GAAYzP,IAAM0P,YAAgC,WAEtDzP,GACC,IAFC2F,EAEF,EAFEA,aAAcE,EAEhB,EAFgBA,cAAeM,EAE/B,EAF+BA,KAASrG,EAExC,iBACA,OACE,kBAAC,IAAD,CACE4P,OAAK,EACLC,aAAW,EACXC,SAAU/J,GAA0B,WAATM,EAC3B0J,aAAa,EACbpP,UAAU,UACVqP,QACE,4BAAQF,SAAU/J,EAAejF,QAAS+E,GAA1C,WAKF,kBAAC,EAAD,eACEA,aAAcA,EACdE,cAAeA,EACfM,KAAMA,GACFrG,EAJN,CAKEE,IAAKA,SAMP+P,GAAgB,SAAC,GAAqD,IAAnDlM,EAAkD,EAAlDA,QAAS1B,EAAyC,EAAzCA,UAAWgE,EAA8B,EAA9BA,KAC3C,OACE,yBAAK1F,UAAU,gBAAgBN,MAAO,CAAE6P,UAAW,WAChD,IAES,WAAT7J,EACC,0DAEA,oCACGtC,EAAQoM,MAAQpM,EAAQoM,MAAQ,WACjC,6BACGpO,IAAOM,EAAU,IAAI+N,OAAO,OAD/B,KACyC,IACtCrO,IAAOM,EAAU,IAAI+N,OAAO,WAQnCpB,GAAgB,SAACqB,GACrB,IAAM9M,EAAK+M,OAAOtO,KAAKuO,UACvB,OAAO,eAAGhN,EAAV,2BAAoB8M,GAApB,IAAkCF,MAAO,YAAc5M,MAGnDiN,GAA+B,CACnC,EAAK,CAAElP,MAAO,CAAC,IAAImP,KAAK,KAAM,EAAG,GAAI,IAAK,IAAIA,KAAK,KAAM,EAAG,GAAI,MAChE,EAAK,CACHnP,MAAO,CAAC,IAAImP,KAAK,KAAM,EAAG,GAAI,IAAK,IAAIA,KAAK,KAAM,EAAG,GAAI,KACzDN,MAAO,cAILO,GAA8B,CAClC,EAAK,CACHpP,MAAO,CAAC,IAAImP,KAAK,KAAM,EAAG,GAAI,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,IACxDN,MAAO,qBAET,EAAK,CACH7O,MAAO,CAAC,IAAImP,KAAK,KAAM,EAAG,GAAI,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,IACxDN,MAAO,qBAILvG,GAAe,CACnB+G,EAAG,CAAC,IAAIF,KAAK,KAAM,EAAG,GAAI,GAAI,IAAIA,KAAK,KAAM,EAAG,GAAI,MAGhD/G,GAAmC,CACvC,CAAC,IAAI+G,KAAK,KAAM,EAAG,GAAI,IAAK,IAAIA,KAAK,KAAM,EAAG,GAAI,MAG9CG,GAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,GACrB/H,GAAa,IAAI4H,KAAK,KAAM,EAAG,IAgFtBI,GA9EH,WACV,MAAsClO,mBAASkG,GAAWiI,eAA1D,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAwCrO,mBAASkG,GAAWoI,YAA5D,mBAAOC,EAAP,KAAqBC,EAArB,KACA,EAAsCxO,mBACpCX,KAAKoP,MACFvI,GAAWwI,UAAY,IAAIZ,KAAKM,EAAaG,EAAc,GAAGI,UAC7D,GACA,GAJN,mBAAOC,EAAP,KAAoBC,EAApB,KAOA,EAA4B7O,mBAAS6N,IAArC,mBAAOvC,EAAP,KAAewD,EAAf,KACA,EAAwC9O,mBAAiB+N,IAAzD,mBAAOtD,EAAP,KAAqBsE,EAArB,KAEMC,EAAW,SAACC,GACK,KAAjBV,GAAkC,IAAXU,GACzBZ,GAAe,SAACa,GAAD,OAAaA,EAAU,KACnB,IAAjBX,IAAkC,IAAZU,GACxBZ,GAAe,SAACa,GAAD,OAAaA,EAAU,KACxCV,GAAgB,SAACU,GAAD,OZjHpB,SAAmCC,EAAa1Q,EAAaC,GACzD,IAAM0Q,EAAI/P,SAASX,EAAnB,GAQA,OANIyQ,EAAJ,EACczQ,EAAD,GAAcW,SAASZ,EAATY,IAAuB+P,EAAvB/P,KAAD,EAAwCA,SAASZ,EAATY,IAAuB+P,EAA/D,GAAyEA,EADnG,GAESD,EAAJ,EACS1Q,EAAD,GAAcY,SAASX,EAATW,IAAuB+P,EAAvB/P,KAAD,EAAwCA,SAASX,EAATW,IAAuB+P,EAA/D,GAAyEA,EAD9F,GAGDC,EYyGyBC,CAAmBJ,EAAUD,EAAQ,EAAG,OACrEJ,EAAe,IAGXU,EAAYrP,mBAAQ,WAExB,OADwBd,IAAO,IAAI0O,KAAKM,EAAaG,EAAc,IAC5CiB,IAAIZ,EAAa,KAAKa,WAC5C,CAACrB,EAAaG,EAAcK,IAC/B,OACE,yBAAK5Q,UAAU,OACb,yBAAKA,UAAU,kBACb,4BAAQA,UAAU,eAAeG,QAAS,kBAAM6Q,GAAU,KACvD,IACA,IAAK,KAER,8BACG5P,IAAO,IAAI0O,KAAKM,EAAaG,IAAed,OAAO,cAEtD,4BAAQzP,UAAU,eAAeG,QAAS,kBAAM6Q,EAAS,KACtD,IACA,IAAK,MAGV,yBAAKhR,UAAU,kBACZiQ,GAAMyB,KAAI,SAACC,EAASC,GAAV,OACT,4BACE/K,IAAK8K,EACLxR,QAAS,kBAAM0Q,EAAee,IAC9B5R,UAAS,yBACP4Q,IAAgBgB,EAAQ,UAAY,UAK5C,kBAAC,EAAD,CAGEjN,WAAY,IACZ5E,OAAO,QACPyM,cAAec,EACfR,sBAAuBgE,EACvBrE,aAAcA,EACd6B,qBAAsByC,EACtB/C,iBAAiB,UACjBK,cAAeA,GACftE,mBAAoB,IACpBd,MAAOA,GACPF,gBAAiBA,GACjB8I,eAAa,EACbjQ,mBAAoBmN,GACpBjN,sBAAuBwN,GACvBxF,qBAAsB,IACtBF,kBAAmB,EACnBD,4BAA6B,IAC7BzB,WAAYqJ,MCxKpBO,IAASC,OAAO,kBAAC,GAAD,MAAS/E,SAASgF,eAAe,W","file":"static/js/main.cb5cc737.chunk.js","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport React from 'react';\r\nimport { EventRootProps } from '../../types';\r\n\r\n\r\nexport const DefaultEventRootComponent =  React.memo(\r\n    React.forwardRef<any, EventRootProps>(function DefaultEventRootComponent(\r\n    {\r\n      isActive,\r\n      handleDelete,\r\n      id,\r\n      cellIndex,\r\n      rangeIndex,\r\n      disableDelete,\r\n      type,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) {\r\n\r\n    return <div ref={ref} {...props} />;\r\n  }),\r\n);\r\n\r\n\r\n","/* eslint-disable prettier/prettier */\r\nimport React from \"react\";\r\nimport { Rect } from \"../../types\";\r\nimport styles from '../WeekScheduler/WeekScheduler.module.css'\r\n\r\ninterface CellProps {\r\n  rect?: Rect;\r\n  onClick?: React.MouseEventHandler;\r\n  timeIndex: number;\r\n  \r\n}\r\n\r\nexport const Cell: React.FC<CellProps> = ({\r\n  rect,\r\n  onClick,\r\n  children,\r\n}) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        top: rect?.top,\r\n        left: rect?.left,\r\n        width: rect?.width,\r\n        height: rect?.height,\r\n      }}\r\n      className={styles.cell}\r\n      onClick={onClick}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","/* eslint-disable prettier/prettier */\r\nexport const getSpan = (x1: number, x2: number) => 1 + (x2 - x1);\r\n","/* eslint-disable prettier/prettier */\r\nimport moment from \"moment\";\r\n\r\nexport function clamp(num: number, min: number, max: number) {\r\n    return num <= min ? min : num >= max ? max : num;\r\n}\r\n\r\nexport function clampWrapInclusive(val: number, min: number, max: number) {\r\n    const N = Math.abs(max - min);\r\n    let newval = 0;\r\n    if (val < min)\r\n        newval = (max + 1) - ((Math.abs(min - val) % (N + 1) !== 0) ? Math.abs(min - val) % (N + 1) : (N + 1));\r\n    else if (val > max)\r\n        newval = (min - 1) + ((Math.abs(max - val) % (N + 1) !== 0) ? Math.abs(max - val) % (N + 1) : (N + 1));\r\n    else\r\n        newval = val;\r\n    return newval;\r\n}\r\n\r\nexport function range(from: number, to: number){\r\n    const result = [];\r\n    for (let i = from; i < to; i++){\r\n        result.push(i);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function differenceInDays(end: Date, start: Date){\r\n    const duration = moment.duration(moment(end).startOf('day').diff(moment(start).startOf('day')));\r\n    const asDays = duration.asDays();\r\n    return Math.trunc(asDays);\r\n}\r\n\r\nexport function differenceInMinutes(end: Date, start: Date){\r\n    const duration = moment.duration(moment(end).diff(moment(start)));\r\n    return duration.asMinutes();\r\n}\r\n","/* eslint-disable prettier/prettier */\r\nimport { CellInfo, Grid, Rect } from \"../types\";\r\nimport { getSpan } from \"./getSpan\";\r\nimport { clamp } from \"./utility\";\r\n\r\n\r\nexport const createGrid = ({\r\n    totalHeight,\r\n    totalWidth,\r\n    numVerticalCells,\r\n    numHorizontalCells,\r\n    numVisualVerticalCells,\r\n    maxRangeHeightSpan,\r\n  }: {\r\n    totalHeight: number;\r\n    totalWidth: number;\r\n    numVerticalCells: number;\r\n    numHorizontalCells: number;\r\n    numVisualVerticalCells: number;\r\n    maxRangeHeightSpan: number;\r\n  }): Grid => {\r\n    const cellHeight = totalHeight / numVisualVerticalCells;\r\n    const cellWidth = totalWidth / numHorizontalCells;\r\n    const cellPrecisionHeight = totalHeight / numVerticalCells;\r\n    return {\r\n      totalHeight,\r\n      totalWidth,\r\n      numVerticalCells,\r\n      numHorizontalCells,\r\n      cellWidth,\r\n      cellHeight,\r\n      maxRectHeight: cellHeight * maxRangeHeightSpan,\r\n  \r\n      getRectFromCell(data: CellInfo) {\r\n        const { endX, startX, endY, startY, spanX, spanY } = data;\r\n        const bottom = endY * this.cellHeight;\r\n        const top = startY * this.cellHeight;\r\n        const left = startX * this.cellWidth;\r\n        const right = endX * this.cellWidth;\r\n        const height = spanY * this.cellHeight;\r\n        const width = spanX * this.cellWidth;\r\n  \r\n        return {\r\n          bottom,\r\n          top,\r\n          left,\r\n          right,\r\n          height,\r\n          width,\r\n  \r\n          // @TODO: check the math\r\n          startX: startX * this.cellWidth,\r\n          endX: endX * this.cellWidth,\r\n          startY: startY * this.cellHeight,\r\n          endY: endY * this.cellHeight,\r\n        };\r\n      },\r\n  \r\n      getCellFromRect(data: Rect, dragging = false) {\r\n\r\n        let startX, startY, endX, endY;\r\n\r\n        if (dragging){\r\n          startX = clamp(\r\n            Math.floor(data.left / this.cellWidth),\r\n            0,\r\n            numHorizontalCells - 1,\r\n          );\r\n          startY = \r\n            Math.floor(data.top / cellPrecisionHeight) \r\n            * (numVisualVerticalCells / numVerticalCells);\r\n          endX = clamp(\r\n            Math.floor(data.right / this.cellWidth),\r\n            0,\r\n            numHorizontalCells - 1,\r\n          );\r\n          endY = \r\n            Math.floor((data.bottom - cellHeight) / cellPrecisionHeight)\r\n            * (numVisualVerticalCells / numVerticalCells);\r\n        }else{\r\n          startX = clamp(\r\n            Math.round(data.left / this.cellWidth),\r\n            0,\r\n            numHorizontalCells - 1,\r\n          );\r\n          startY = \r\n          Math.round(data.top / cellPrecisionHeight)\r\n          * (numVisualVerticalCells / numVerticalCells);\r\n          endX = clamp(\r\n            Math.round(data.right / this.cellWidth),\r\n            0,\r\n            numHorizontalCells - 1,\r\n          );\r\n          endY = \r\n            Math.round(data.bottom / cellPrecisionHeight)\r\n            * (numVisualVerticalCells / numVerticalCells);\r\n        }\r\n        const spanX = clamp(getSpan(startX, endX), 1, numHorizontalCells);\r\n        const spanY = clamp(getSpan(startY, endY), (numVisualVerticalCells / numVerticalCells), maxRangeHeightSpan);\r\n        return {\r\n          spanX,\r\n          spanY,\r\n          startX,\r\n          startY,\r\n          endX,\r\n          endY,\r\n        };\r\n      },\r\n    };\r\n  };","/* eslint-disable prettier/prettier */\r\nimport moment from 'moment';\r\nimport React from 'react'\r\nimport { EventDetails } from '../WeekScheduler/WeekScheduler';\r\nimport styles from '../WeekScheduler/WeekScheduler.module.css'\r\n\r\nexport type EventContentProps = {\r\n    width: number;\r\n    height: number;\r\n    dateRange: [Date, Date];\r\n    isStart: boolean;\r\n    isEnd: boolean;\r\n    type: 'dynamic' | 'static';\r\n    details: EventDetails;\r\n    id: string;\r\n    cellIndex: number;\r\n};\r\n  \r\nexport const EventContent = React.memo(function EventContent({\r\nwidth,\r\nheight,\r\ndateRange,\r\nisStart,\r\nisEnd,\r\n}: EventContentProps) {\r\n\r\n\r\nreturn (\r\n    <div\r\n    style={{ width, height }}\r\n    className={styles[\"event-content\"]}\r\n    >\r\n    <span aria-hidden className={styles.start}>\r\n        {isStart && moment(dateRange[0]).format('lll')}\r\n    </span>\r\n    {isStart && isEnd && <span> - </span>}\r\n    <span aria-hidden className={styles.end}>\r\n        {isEnd && moment(dateRange[1]).format('lll')}\r\n    </span>\r\n    </div>\r\n);\r\n});\r\n  ","/* eslint-disable prettier/prettier */\r\nimport React, { useCallback, useEffect, useMemo, useRef, useState, memo } from 'react'\r\nimport { CellInfo, Grid } from '../../types';\r\nimport { SharedScheduleProps } from '../Schedule/Schedule';\r\nimport { EventDetails } from '../WeekScheduler/WeekScheduler';\r\nimport { Resizable, ResizeCallback } from 're-resizable';\r\nimport Draggable, { DraggableEventHandler } from 'react-draggable';\r\nimport invariant from 'invariant';\r\nimport { DefaultEventRootComponent } from '../EventRootComponent/DefaultEventRootComponent';\r\nimport { EventContent, EventContentProps } from '../EventContent/EventContent';\r\nimport { clamp } from '../../utils/utility';\r\nimport styles from '../WeekScheduler/WeekScheduler.module.css'\r\n\r\n\r\ninterface RangeBoxProps {\r\n    cell: CellInfo;\r\n    grid: Grid;\r\n    id: string;\r\n    details: EventDetails;\r\n    cellIndex: number;\r\n    rangeIndex: number;\r\n    cellArray: CellInfo[];\r\n}\r\n// memo at bottom of file\r\nconst RangeBox: React.FC<RangeBoxProps & SharedScheduleProps> = ({\r\n    cell,\r\n    grid,\r\n    id,\r\n    cellIndex,\r\n    rangeIndex,\r\n    details,\r\n    moveAxis,\r\n    cellInfoToDateRange,\r\n    onChange,\r\n    checkValidDateRange,\r\n    cellArray,\r\n    isResizable,\r\n    isMovable,\r\n    onActiveChange,\r\n    onClick,\r\n    getIsActive,\r\n    disableDelete,\r\n    type,\r\n    className,\r\n    eventRootComponent: EventRootComponent = DefaultEventRootComponent,\r\n    eventContentComponent,\r\n}) => {\r\n    const ref = useRef(null);\r\n    const [modifiedCell, setModifiedCell] = useState(cell);\r\n    const [tempCell, setTempCell] = useState(modifiedCell);\r\n    const [isModifying, setModifying] = useState(false);\r\n    const originalRect = useMemo(() => grid.getRectFromCell(cell), [cell, grid]);\r\n    const rect = useMemo(() => grid.getRectFromCell(modifiedCell), [\r\n      modifiedCell,\r\n      grid,\r\n    ]);\r\n\r\n   \r\n    useEffect(() => {\r\n      setModifiedCell(cell);\r\n    }, [cell]);\r\n  \r\n    const modifiedDateRange = useMemo(() => cellInfoToDateRange(modifiedCell), [\r\n      cellInfoToDateRange,\r\n      modifiedCell,\r\n    ]);\r\n\r\n    const isActive = useMemo(() => getIsActive({ cellIndex, rangeId: id }), [\r\n      cellIndex,\r\n      id,\r\n      getIsActive,\r\n    ]);\r\n\r\n\r\n      const handleStop = useCallback(() => {\r\n        setModifying(false);\r\n        if (!onChange) {\r\n          return;\r\n        }\r\n        \r\n          \r\n  \r\n          if (checkValidDateRange(id, cellInfoToDateRange(modifiedCell))){\r\n            \r\n            \r\n            onChange({...details, range: cellInfoToDateRange(modifiedCell)}, id);\r\n          }else{\r\n            setModifiedCell(tempCell);\r\n          }\r\n  \r\n        }, [tempCell, modifiedCell, setModifiedCell, id, details, cellInfoToDateRange, onChange, checkValidDateRange, setModifying]);\r\n  \r\n        const handleStart = useCallback(() => {\r\n          \r\n          \r\n          setModifying(true);\r\n          setTempCell(modifiedCell);\r\n          \r\n    \r\n          }, [modifiedCell, setTempCell, setModifying]);\r\n    \r\n\r\n    const handleDrag: DraggableEventHandler = useCallback(\r\n        (event, { y, x }) => {\r\n          if (moveAxis === 'none') {\r\n            return;\r\n          }\r\n    \r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n    \r\n          const newRect = {\r\n            ...rect,\r\n          };\r\n    \r\n          if (moveAxis === 'both' || moveAxis === 'y') {\r\n            const startOrEnd1 = y;\r\n            const startOrEnd2 = startOrEnd1 + rect.height;\r\n            const newTop = Math.min(startOrEnd1, startOrEnd2);\r\n            const newBottom = newTop + rect.height;\r\n            newRect.bottom = newBottom;\r\n            newRect.top = newTop;\r\n          }\r\n    \r\n          if (moveAxis === 'both' || moveAxis === 'x') {\r\n            const startOrEnd1 = x;\r\n            const startOrEnd2 = startOrEnd1 + rect.width;\r\n            const newLeft = Math.min(startOrEnd1, startOrEnd2);\r\n            const newRight = newLeft + rect.width;\r\n            newRect.right = newRight;\r\n            newRect.left = newLeft;\r\n          }\r\n    \r\n          const { startY, startX } = grid.getCellFromRect(newRect);\r\n    \r\n          const newCell = {\r\n            ...cell,\r\n            startX: moveAxis === 'y' ? cell.startX : startX,\r\n            endX: moveAxis === 'x' || moveAxis === 'both' ? startX + cell.spanX - 1 : cell.endX,\r\n            startY: moveAxis === 'x' ? cell.startY : startY,\r\n            endY: moveAxis === 'y' || moveAxis === 'both' ? startY + cell.spanY - 1 : cell.endY,\r\n          };\r\n    \r\n          invariant(\r\n            newCell.spanY === cell.spanY && newCell.spanX === cell.spanX,\r\n            `Expected the dragged time cell to have the same dimensions`,\r\n          );\r\n    \r\n          setModifiedCell(newCell);\r\n          setModifying(true);\r\n        },\r\n        [grid, rect, moveAxis, cell, setModifiedCell, setModifying],\r\n      );\r\n\r\n\r\n\r\n      const handleResize: ResizeCallback = useCallback(\r\n        (event, direction, _ref, delta) => {\r\n          if (!isResizable) {\r\n            return;\r\n          }\r\n    \r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n    \r\n          if (delta.height === 0) {\r\n            return;\r\n          }\r\n\r\n          const maxHeight = grid.maxRectHeight;\r\n          const cellHeight = grid.cellHeight;\r\n          const cellPrecisionHeight = grid.totalHeight / grid.numVerticalCells;\r\n    \r\n          const newSize = {\r\n            height: delta.height + rect.height,\r\n            width: delta.width + rect.width,\r\n          };\r\n    \r\n          const newRect = {\r\n            ...originalRect,\r\n            ...newSize,\r\n          };\r\n\r\n          console.log(maxHeight)\r\n\r\n    \r\n          if (direction.includes('top')) {\r\n            // newRect.top -= delta.height;\r\n            // this clamp is a temporary fix to solve a problem where if you \r\n            // rezise the top at max height it also moves the whole cell up instead\r\n            // not needed for bottom position\r\n            newRect.top = clamp(newRect.top - delta.height,newRect.bottom - maxHeight + cellHeight,newRect.bottom - cellPrecisionHeight + cellHeight);\r\n          } else if (direction.includes('bottom')) {\r\n            newRect.bottom += delta.height;\r\n          }\r\n    \r\n          const { spanY, startY, endY } = grid.getCellFromRect(newRect);\r\n          const newCell = {\r\n            ...cell,\r\n            spanY,\r\n            startY,\r\n            endY,\r\n          };\r\n    \r\n          \r\n          setModifiedCell(newCell);\r\n          \r\n        },\r\n        [grid, rect, setModifiedCell, isResizable, cell, originalRect],\r\n      );\r\n\r\n      const handleDelete = useCallback(() => {\r\n        if (!onChange || disableDelete) {\r\n          return;\r\n        }\r\n    \r\n        onChange(undefined, id);\r\n      }, [onChange, disableDelete, id]);\r\n\r\n      const handleOnFocus = useCallback(() => {\r\n        if (!onActiveChange) {\r\n          return;\r\n        }\r\n    \r\n        onActiveChange([id, cellIndex]);\r\n      }, [onActiveChange, id, cellIndex]);\r\n    \r\n      const handleOnClick = useCallback(() => {\r\n        if (!onClick || !isActive) {\r\n          return;\r\n        }\r\n    \r\n        onClick([id, cellIndex]);\r\n      }, [onClick, id, isActive, cellIndex]);\r\n      \r\n  \r\n    \r\n    const { top, left, width, height } = rect;\r\n    const eventContentProps: EventContentProps = { \r\n      width, \r\n      height, \r\n      dateRange: modifiedDateRange, \r\n      isStart: cellIndex === 0, \r\n      isEnd: cellIndex === cellArray.length - 1,\r\n      id,\r\n      cellIndex,\r\n      details,\r\n      type\r\n    };\r\n    const {top: originalTop, left: originalLeft, width: originalWidth, height: originalHeight} = originalRect;\r\n        return (<div>\r\n            <Draggable\r\n                axis={moveAxis}\r\n                bounds={{\r\n                    top: 0,\r\n                    bottom: grid.totalHeight - height,\r\n                    left: 0,\r\n                    right: grid.totalWidth - width,\r\n                }}\r\n                position={{ x: left, y: top }}\r\n                onStart={handleStart}\r\n                onDrag={handleDrag}\r\n                onStop={handleStop}\r\n                handle={`.${styles[\"handle-drag\"]}`}\r\n                // cancel=\".handle, .handle.bottom, .handle.top\"\r\n            >\r\n                  <EventRootComponent\r\n                    tabIndex=\"0\"\r\n                    role=\"button\" \r\n                    disableDelete={disableDelete}\r\n                    onFocus={handleOnFocus}\r\n                    onClick={handleOnClick}\r\n                    handleDelete={handleDelete}\r\n                    cellIndex={cellIndex}\r\n                    rangeIndex={rangeIndex}\r\n                    id={id}\r\n                    isActive={isActive}\r\n                    ref={ref}\r\n                    className={`${styles[\"range-box\"]} ${styles.event} ${isModifying? styles.modifying: ''} ${isActive? styles.active: ''} ${className}`} \r\n                    style={{ width, height}}\r\n                    type={type}\r\n                  >\r\n                  {isMovable && <div className={styles[\"handle-drag\"]} />}\r\n                <Resizable\r\n                  size={{width, height}}\r\n                  key={`${rangeIndex}.${cellIndex}.${cellArray.length}.${originalRect.top}.${originalRect.left}`}\r\n                  onResizeStart={handleStart}\r\n                  onResize={handleResize}\r\n                  onResizeStop={handleStop}\r\n                  handleWrapperClass={styles[\"handle-wrapper\"]}\r\n                  enable={isResizable? { top: true, bottom: true}: {}}\r\n                  handleClasses={{\r\n                    bottom: `${styles.handle} ${styles.bottom}`,\r\n                    bottomLeft: styles.handle,\r\n                    bottomRight: styles.handle,\r\n                    left: styles.handle,\r\n                    right: styles.handle,\r\n                    top: `${styles.handle} ${styles.top}`,\r\n                    topLeft: styles.handle,\r\n                    topRight: styles.handle\r\n                  }}\r\n                > \r\n                  {eventContentComponent ? \r\n                  eventContentComponent(eventContentProps) : \r\n                  <EventContent\r\n                    {...eventContentProps}\r\n                  />\r\n                  }\r\n                    </Resizable>\r\n                </EventRootComponent>\r\n            </Draggable>\r\n            {isModifying && <div className={styles[\"original-range-box\"]} style={{ top: originalTop, left: originalLeft, width: originalWidth, height: originalHeight}} />}\r\n            </div>);\r\n}\r\n\r\nexport default memo(RangeBox)","/* eslint-disable prettier/prettier */\r\nimport React, { memo } from 'react'\r\nimport { CellInfo, DateRange, EventType, Grid, OnChangeCallback } from '../../types';\r\nimport { EventContentProps } from '../EventContent/EventContent';\r\nimport RangeBox from '../RangeBox/RangeBox';\r\nimport { Events } from '../WeekScheduler/WeekScheduler';\r\nimport styles from '../WeekScheduler/WeekScheduler.module.css'\r\n\r\nexport interface SharedScheduleProps {\r\n    onChange?: OnChangeCallback;\r\n    grid: Grid;\r\n    isResizable?: boolean;\r\n    isDeletable?: boolean;\r\n    isMovable?: boolean;\r\n    moveAxis: 'none' | 'both' | 'x' | 'y';\r\n    cellInfoToDateRange(cell: CellInfo): DateRange;\r\n    checkValidDateRange(id: string, dateRange: DateRange): boolean;\r\n    eventContentComponent?: (props: EventContentProps) => JSX.Element;\r\n    eventRootComponent?: any;\r\n    onActiveChange?(index: [string, number] | [null, null]): void;\r\n    onClick?(index: [string, number] | [null, null]): void;\r\n    getIsActive(indexes: { cellIndex: number; rangeId: string }): boolean;\r\n    disableDelete?: boolean;\r\n    type: EventType;\r\n    className?: string;\r\n}\r\n\r\ninterface ScheduleProps {\r\n    events: Events;\r\n    dateRangeToCells: (range: DateRange) => CellInfo[];\r\n}\r\n\r\nconst Schedule: React.FC<ScheduleProps & SharedScheduleProps> = ({\r\n    events,\r\n    isMovable,\r\n    dateRangeToCells,\r\n    grid,\r\n    onChange,\r\n    moveAxis,\r\n    cellInfoToDateRange,\r\n    checkValidDateRange,\r\n    isResizable,\r\n    isDeletable,\r\n    onActiveChange,\r\n    onClick,\r\n    getIsActive,\r\n    disableDelete,\r\n    eventRootComponent,\r\n    eventContentComponent,\r\n    type,\r\n    className   \r\n}) => {\r\n        return (\r\n        <div className={styles[\"range-boxes\"]}>\r\n            {\r\n                Object.entries(events).map((e, entryIndex, entries) => (\r\n                <span className={styles[\"schedule-range-group\"]} key={e[0]}>\r\n                    {dateRangeToCells(e[1].range).map((cell, cellIndex, cellArray) => \r\n                    <RangeBox \r\n                        key={`${entryIndex}.${entries.length}.${cellIndex}.${cellArray.length}`}\r\n                        cell={cell}\r\n                        grid={grid}\r\n                        id={e[0]}\r\n                        details={e[1]}\r\n                        onChange={onChange}\r\n                        moveAxis={moveAxis}\r\n                        cellInfoToDateRange={cellInfoToDateRange}\r\n                        checkValidDateRange={checkValidDateRange}\r\n                        rangeIndex={entryIndex}\r\n                        cellIndex={cellIndex}\r\n                        cellArray={cellArray}\r\n                        isResizable={isResizable}\r\n                        isDeletable={isDeletable}\r\n                        isMovable={isMovable}\r\n                        onActiveChange={onActiveChange}\r\n                        onClick={onClick}\r\n                        getIsActive={getIsActive}\r\n                        disableDelete={disableDelete}\r\n                        eventContentComponent={eventContentComponent}\r\n                        eventRootComponent={eventRootComponent}\r\n                        type={type}\r\n                        className={className}\r\n                    />)}\r\n                </span>))\r\n            }\r\n        </div>);\r\n}\r\n\r\nexport default memo(Schedule)","/* eslint-disable prettier/prettier */\r\nimport compareAsc from \"date-fns/compareAsc\";\r\nimport moment from \"moment\";\r\nimport { DateRange, MapCellInfoToDateRange } from \"../types\";\r\nimport { cellToDate } from \"./cellToDate\";\r\nimport { range } from \"./utility\";\r\n\r\nexport type RecurringTimeRange = DateRange[];\r\n\r\nexport const createMapCellInfoToRecurringTimeRange: MapCellInfoToDateRange = ({\r\n  fromY: toMin,\r\n  fromX: toDay,\r\n  originDate,\r\n}) => ({ startX, startY, endX, spanY }) => {\r\n  const result = range(startX, endX + 1)\r\n    .map(i => {\r\n      const startDate = cellToDate({\r\n        startX: i,\r\n        startY,\r\n        toMin,\r\n        toDay,\r\n        originDate,\r\n      });\r\n      const endDate = moment.min(\r\n        moment(startDate).add(toMin(spanY), 'minutes'),\r\n        moment(startDate).endOf('day'),\r\n      );\r\n\r\n      const range: DateRange = moment(startDate).isBefore(endDate)\r\n        ? [startDate.toDate(), endDate.toDate()]\r\n        : [endDate.toDate(), startDate.toDate()];\r\n\r\n      return range;\r\n    })\r\n    .sort((range1, range2) =>  compareAsc(range1[0], range2[0]));\r\n\r\n  return result;\r\n};","/* eslint-disable prettier/prettier */\r\nimport moment from \"moment\";\r\n\r\n\r\nexport const cellToDate = ({\r\n    startX,\r\n    startY,\r\n    toMin,\r\n    originDate,\r\n}: {\r\n    startX: number;\r\n    startY: number;\r\n    toMin: (y: number) => number;\r\n    toDay: (x: number) => number;\r\n    originDate: Date;\r\n}) => moment(originDate).add(startX, 'days').add(toMin(startY), 'minutes');","/* eslint-disable prettier/prettier */\r\nimport { Events } from '../components/WeekScheduler/WeekScheduler';\r\n\r\nexport function mergeEvents(\r\n  event1: Events | undefined,\r\n  event2: Events | null,\r\n): Events {\r\n\r\n  if (!event1) {\r\n    return {};\r\n  }\r\n\r\n  if (event2 === null) {\r\n    return event1;\r\n  }\r\n\r\n  return {...event1, ...event2 };\r\n}","/* eslint-disable prettier/prettier */\r\nimport React, { memo } from 'react'\r\nimport { CellInfo, DateRange, Grid } from '../../types';\r\nimport { ClosedDaysTimes, Hours } from '../WeekScheduler/WeekScheduler';\r\nimport styles from '../WeekScheduler/WeekScheduler.module.css'\r\n\r\ninterface BoundsProps {\r\n    grid: Grid;\r\n    dateRangeToCells: (range: DateRange) => CellInfo[];\r\n    hours?: Hours;\r\n    closedDaysTimes?: ClosedDaysTimes;\r\n    startOfWeek: moment.Moment;\r\n}\r\n\r\nconst Bounds: React.FC<BoundsProps> = ({\r\n    grid,\r\n    hours,\r\n    closedDaysTimes,\r\n    dateRangeToCells,\r\n    startOfWeek\r\n}) => {\r\n    \r\n    return (\r\n        <div className={styles.bounds}>\r\n            {closedDaysTimes && closedDaysTimes.map((cdt, cdtIndex) => (\r\n            <span className={styles[\"closed-day-time-container\"]} key={cdtIndex}>\r\n            {dateRangeToCells(cdt).map((cell, cellIndex, cellArray) => {\r\n                    const { left, top, width, height } = grid.getRectFromCell(cell);\r\n\r\n                    return <div \r\n                        className={`${styles[\"bound-box\"]} ${styles[\"closed-day-time\"]}`} \r\n                        style={{left, top, width, height}}\r\n                        key={`${cellIndex}.${cellArray.length}`}\r\n                    />})}\r\n            </span>)\r\n            )}\r\n\r\n            {hours && Object.entries(hours).map(h => (\r\n            <span className={styles[\"hours-container\"]} key={h[0]}>\r\n\r\n            {dateRangeToCells([startOfWeek.clone().add(h[0], 'days').startOf('day').toDate(), startOfWeek.clone().add(h[0], 'days').set({'hour':h[1][0].getHours(), 'minute':h[1][0].getMinutes(), 'second':h[1][0].getSeconds()}).toDate()]).map((cell, cellIndex, cellArray) => {\r\n                const { left, top, width, height } = grid.getRectFromCell(cell);\r\n\r\n                return <div \r\n                    className={`${styles[\"bound-box\"]} ${styles.hours}`}\r\n                    style={{left, top, width, height}}\r\n                    key={`start.${h[0]}.${cellIndex}.${cellArray.length}`}\r\n                />})}\r\n            {dateRangeToCells([startOfWeek.clone().add(h[0], 'days').set({'hour':h[1][1].getHours(), 'minute':h[1][1].getMinutes(), 'second':h[1][1].getSeconds()}).toDate(), startOfWeek.clone().add(h[0], 'days').endOf('day').toDate()]).map((cell, cellIndex, cellArray) => {\r\n                const { left, top, width, height } = grid.getRectFromCell(cell);\r\n\r\n                return <div \r\n                    className={`${styles[\"bound-box\"]} ${styles.hours}`} \r\n                    style={{left, top, width, height}}\r\n                    key={`end.${h[0]}.${cellIndex}.${cellArray.length}`}\r\n                />})}\r\n            \r\n            </span>)\r\n            )}\r\n        </div>);\r\n}\r\n\r\nexport default memo(Bounds);","/* eslint-disable prettier/prettier */\r\nimport React, {\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  useMemo,\r\n  useCallback,\r\n  memo,\r\n} from \"react\";\r\nimport moment from \"moment\";\r\nimport isEqual from 'date-fns/isEqual'\r\nimport invariant from 'invariant';\r\nimport styles from './WeekScheduler.module.css'\r\nimport { Cell } from \"../Cell/Cell\";\r\nimport { CellInfo, DateRange, Grid, OnChangeCallback } from \"../../types\";\r\nimport { createGrid } from \"../../utils/createGrid\";\r\nimport Schedule, { SharedScheduleProps } from \"../Schedule/Schedule\";\r\nimport { createMapDateRangeToCells } from \"../../utils/createMapDateRangeToCells\";\r\nimport {\r\n  createMapCellInfoToRecurringTimeRange,\r\n} from \"../../utils/createMapCellInfoToRecurringTimeRange\";\r\nimport { getSpan } from \"../../utils/getSpan\";\r\nimport { mergeEvents } from \"../../utils/mergeEvents\";\r\nimport isWithinInterval from \"date-fns/isWithinInterval\";\r\n// import { useClickAndDrag } from \"../../hooks/useClickAndDrag\";\r\nimport Bounds from \"../Bounds/Bounds\";\r\nimport addHours from \"date-fns/addHours\";\r\nimport { getEarliestTimeRange } from \"../../utils/getEarliestTimeRange\";\r\nimport scrollIntoView from \"scroll-into-view-if-needed\";\r\nimport useComponentSize from \"@rehooks/component-size\";\r\nimport { isAfter, isBefore } from \"date-fns\";\r\n\r\nexport type Hours = {[id:number]: DateRange}\r\nexport type ClosedDaysTimes = DateRange[];\r\n\r\nexport type EventDetails = { range: DateRange; title?: string; desc?: string };\r\nexport type Events = { [id: string]: EventDetails };\r\n\r\ninterface WeekSchedulerProps {\r\n  originDate?: Date;\r\n  /**\r\n   * The height of the container for the whole scheduler. If not set, it will be 100vh.\r\n   */\r\n  height?: string;\r\n  /**\r\n   * The width of the container for the whole scheduler. If not set, it will be 100%.\r\n   */\r\n  width?: string;\r\n  /**\r\n   * The cell height. If not set, it will be computed based on the available height.\r\n   */\r\n  cellHeight?: number;\r\n  /**\r\n   * The cell width. If not set, it will be computed based on the available width.\r\n   */\r\n  cellWidth?: number;\r\n  /**\r\n   * The visual grid increments in minutes.\r\n   * @default 120\r\n   */\r\n  visualGridVerticalPrecision?: number;\r\n\r\n  /**\r\n   * The minimum number of minutes a created range can span\r\n   * @default 15\r\n   */\r\n  verticalPrecision?: number;\r\n\r\n  /**\r\n   * The minimum number of minutes for an time block\r\n   * created with a single click.\r\n   * @default visualGridVerticalPrecision\r\n   */\r\n  cellClickPrecision?: number;\r\n\r\n  /**\r\n   * The maximum number of minutes a createed range could be span.\r\n   * If not provided it will be the number of minutes in a day.\r\n   */\r\n   maxVerticalPrecision?: number;\r\n\r\n  /**\r\n   * Events that could be moved around\r\n   */\r\n  dynamicEvents: Events;\r\n  /**\r\n   * Events that can't be moved but take up space and prevent other events from moving to their location\r\n   */\r\n  staticEvents: Events;\r\n  /**\r\n   * The view will initially be scrolled to these hours.\r\n   * Defaults to work hours (9-17).\r\n   * @default [9, 17]\r\n   */\r\n  defaultHours?: [number, number];\r\n  onChangeStaticEvents: (newEvents: Events) => void;\r\n  onChangeDynamicEvents: (newEvents: Events) => void;\r\n  onEventClick?: SharedScheduleProps['onClick'];\r\n  newEventsAddedTo: \"static\" | \"dynamic\" | \"none\";\r\n  eventsOverlap?: boolean;\r\n  disableDelete?: boolean;\r\n  eventContentComponent?: SharedScheduleProps['eventContentComponent'];\r\n  eventRootComponent?: SharedScheduleProps['eventRootComponent'];\r\n  generateEvent: (eventDetails: EventDetails) => Events;\r\n  hours?: Hours;\r\n  closedDaysTimes?: ClosedDaysTimes;\r\n}\r\n\r\nconst rangesOverlap = (rangeA: DateRange, rangeB: DateRange) => {\r\n  return isBefore(rangeA[0], rangeB[1]) && isAfter(rangeA[1], rangeB[0]);\r\n}\r\n\r\nexport const daysOfWeek = [0, 1, 2, 3, 4, 5, 6];\r\nconst NumberOfMinutesInADay = 24 * 60;\r\nconst horizontalPrecision = 1;\r\nconst toDay = (x: number): number => x * horizontalPrecision;\r\nconst toX = (days: number): number => days / horizontalPrecision;\r\n\r\nconst WeekScheduler: React.FC<WeekSchedulerProps> = ({\r\n  originDate = new Date(),\r\n  width,\r\n  height,\r\n  cellWidth,\r\n  cellHeight,\r\n  visualGridVerticalPrecision = 120,\r\n  verticalPrecision = 15,\r\n  defaultHours = [9, 17],\r\n  maxVerticalPrecision = NumberOfMinutesInADay,\r\n  cellClickPrecision = visualGridVerticalPrecision,\r\n  dynamicEvents,\r\n  staticEvents,\r\n  onChangeStaticEvents,\r\n  onChangeDynamicEvents,\r\n  newEventsAddedTo,\r\n  eventsOverlap,\r\n  disableDelete,\r\n  generateEvent,\r\n  hours,\r\n  closedDaysTimes,\r\n  onEventClick,\r\n  eventContentComponent,\r\n  eventRootComponent,\r\n}) => {\r\n\r\n\r\n  \r\n  const numVerticalCells = NumberOfMinutesInADay / verticalPrecision;\r\n  const numHorizontalCells = 7 / horizontalPrecision;\r\n  const numVisualVerticalCells =\r\n    NumberOfMinutesInADay / visualGridVerticalPrecision;\r\n  const times: number[] = [];\r\n  const schedulerRef = useRef<HTMLDivElement>(null);\r\n  const parentRef = useRef<HTMLDivElement>(null);\r\n  const root = useRef<HTMLDivElement>(null);\r\n  const [[totalHeight, totalWidth], setDimensions] = useState([0, 0]);\r\n\r\n  const size = useComponentSize(parentRef);\r\n\r\n  // const {\r\n  //   style: dragBoxStyle,\r\n  //   box,\r\n  //   isDragging,\r\n  //   hasFinishedDragging,\r\n  //   cancel,\r\n  // } = useClickAndDrag(parentRef, newEventsAddedTo === 'none');\r\n\r\n  const toMin = useCallback(\r\n    (y: number) =>\r\n      (y * verticalPrecision) /\r\n      (verticalPrecision / visualGridVerticalPrecision),\r\n    [verticalPrecision, visualGridVerticalPrecision]\r\n  );\r\n  const toY = useCallback(\r\n    (mins: number): number =>\r\n      (mins / verticalPrecision) *\r\n      (verticalPrecision / visualGridVerticalPrecision),\r\n    [verticalPrecision, visualGridVerticalPrecision]\r\n  );\r\n\r\n\r\n\r\n  // const [pendingCreation, setPendingCreation] =\r\n  //   useState<Events | null>(null);\r\n\r\n\r\n  for (let i = 0; i < numVisualVerticalCells; i++) {\r\n    times.push(i);\r\n  }\r\n\r\n\r\n\r\n  useEffect(\r\n    function updateGridDimensionsOnSizeOrCellCountChange() {\r\n      if (!schedulerRef.current) {\r\n        setDimensions([0, 0]);\r\n        return;\r\n      }\r\n\r\n      setDimensions([schedulerRef.current.clientHeight, schedulerRef.current.clientWidth]);\r\n    },\r\n    [size, numVisualVerticalCells],\r\n  );\r\n\r\n\r\n\r\n  const startOfWeek = useMemo(\r\n    () => moment(originDate).clone().startOf(\"week\"),\r\n    [originDate]\r\n  );\r\n  const endOfWeek = moment(originDate).clone().endOf(\"week\");\r\n\r\n  // originDate is set to the startOfWeek not just some arbitrary date passed by the user\r\n  // this will make it easier to figure out the position of the date range horizontally\r\n  // as originDate is mainly used to calculate the x position\r\n\r\n  // numVerticalCells is set as the numVisualVeritcal cells because the ranges need to be\r\n  // positioned relative to the visual vertical cells not the vertical cells\r\n  const dateRangeToCells = useMemo(() => {\r\n    return createMapDateRangeToCells({\r\n      originDate: startOfWeek.toDate(),\r\n      numVerticalCells: numVisualVerticalCells,\r\n      numHorizontalCells,\r\n      toX,\r\n      toY,\r\n    });\r\n  }, [toY, numVisualVerticalCells, numHorizontalCells, startOfWeek]);\r\n\r\n  const cellInfoToDateRanges = useMemo(() => {\r\n    return createMapCellInfoToRecurringTimeRange({\r\n      originDate: startOfWeek.toDate(),\r\n      fromY: toMin,\r\n      fromX: toDay,\r\n    });\r\n  }, [toMin, startOfWeek]);\r\n\r\n  const cellInfoToSingleDateRange = useCallback(\r\n    (cell: CellInfo): DateRange => {\r\n      const [first, ...rest] = cellInfoToDateRanges(cell);\r\n      invariant(\r\n        rest.length === 0,\r\n        `Expected \"cellInfoToSingleDateRange\" to return a single date range, found ${\r\n          rest.length\r\n        } additional ranges instead. ${JSON.stringify(first)} - ${JSON.stringify(rest)}`,\r\n      );\r\n\r\n      return first;\r\n    },\r\n    [cellInfoToDateRanges],\r\n  );\r\n\r\n \r\n\r\n\r\n  const maxRangeHeightSpan = useMemo(() => { \r\n    \r\n    return toY(maxVerticalPrecision);\r\n    \r\n  }, [toY, maxVerticalPrecision]);\r\n\r\n\r\n  const grid = useMemo<Grid | null>(() => {\r\n    if (totalHeight === null || totalWidth === null) {\r\n      return null;\r\n    }\r\n\r\n    return createGrid({\r\n      totalHeight: cellHeight? cellHeight * numVisualVerticalCells: totalHeight,\r\n      totalWidth: cellWidth? cellWidth * numHorizontalCells: totalWidth,\r\n      numHorizontalCells,\r\n      numVerticalCells,\r\n      numVisualVerticalCells,\r\n      maxRangeHeightSpan,\r\n    });\r\n  }, [totalHeight, totalWidth, numHorizontalCells, numVerticalCells, numVisualVerticalCells, maxRangeHeightSpan, cellHeight, cellWidth]);\r\n\r\n\r\n\r\n\r\n  const checkValidDateRange = useCallback((id: string, dateRange: DateRange) => {\r\n    console.log('checking valid date');\r\n    // check if within hours\r\n    const dayOfWeek = dateRange[0].getDay();\r\n\r\n    if (hours && hours[dayOfWeek]){\r\n      const start = hours[dayOfWeek][0];\r\n      const end = hours[dayOfWeek][1];\r\n      start.setFullYear(dateRange[0].getFullYear(), dateRange[0].getMonth(), dateRange[0].getDate());\r\n      end.setFullYear(dateRange[0].getFullYear(), dateRange[0].getMonth(), dateRange[0].getDate());\r\n      if (!isWithinInterval(dateRange[0], { start, end }) || !isWithinInterval(dateRange[1], { start, end })){\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (closedDaysTimes){\r\n      for(let i = 0; i < closedDaysTimes.length; i++){\r\n        const closedDayTime = closedDaysTimes[i];\r\n        \r\n        if (rangesOverlap(dateRange, closedDayTime)){\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!eventsOverlap){\r\n      const allEvents : EventDetails[] = [];\r\n      if (dynamicEvents){\r\n       allEvents.push(...Object.entries(dynamicEvents).filter(value => value[0] !== id).map(value => value[1]));\r\n      }\r\n      if (staticEvents){\r\n        allEvents.push(...Object.entries(staticEvents).filter(value => value[0] !== id).map(value => value[1]));\r\n      }\r\n      for(let i = 0; i < allEvents.length; i++){\r\n        const { range } = allEvents[i];\r\n        if (rangesOverlap(dateRange, range)){\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }, [hours, closedDaysTimes, dynamicEvents, staticEvents, eventsOverlap]);\r\n\r\n  // useEffect(\r\n  //   function updatePendingCreationOnDragBoxUpdate() {\r\n  //     if (grid === null || box === null) {\r\n  //       setPendingCreation(null);\r\n  //       return;\r\n  //     }\r\n      \r\n  //     const cell = grid.getCellFromRect(box, true);\r\n      \r\n  //     const dateRanges = cellInfoToDateRanges(cell);\r\n\r\n  //     let events : Events = {};\r\n\r\n  //     dateRanges.forEach(dateRange => { \r\n  //       if (checkValidDateRange(\"\", dateRange))\r\n  //         events = {...events, ...generateEvent({ range: dateRange })}\r\n  //     });\r\n\r\n  //     setPendingCreation(events);\r\n  //   },\r\n  //   [box, grid, cellInfoToDateRanges, toY, generateEvent, checkValidDateRange],\r\n  // );\r\n\r\n  const [[activeRangeId, activeCellIndex], setActive] = useState<\r\n    [string, number] | [null, null]\r\n  >([null, null]);\r\n\r\n  // useEffect(\r\n  //   function updateScheduleAfterDraggingFinished() {\r\n  //     // if (newEventsAddedTo === 'none') { // for some reason when you change newEventsAddedTo to none this code makes all events disappear\r\n  //     //   return;\r\n  //     // }\r\n\r\n  //     if (hasFinishedDragging) {\r\n  //       if (newEventsAddedTo === 'dynamic')\r\n  //         onChangeDynamicEvents(mergeEvents(dynamicEvents, pendingCreation));\r\n\r\n  //       if (newEventsAddedTo === 'static')\r\n  //         onChangeStaticEvents(mergeEvents(staticEvents, pendingCreation));\r\n  //       setPendingCreation(null);\r\n  //     }\r\n  //   },\r\n  //   [\r\n  //     hasFinishedDragging,\r\n  //     newEventsAddedTo,\r\n  //     onChangeDynamicEvents,\r\n  //     onChangeStaticEvents,\r\n  //     setPendingCreation,\r\n  //     pendingCreation,\r\n  //     staticEvents,\r\n  //     dynamicEvents\r\n  //   ],\r\n  // );\r\n\r\n  // useEffect(\r\n  //   function clearActiveBlockAfterCreation() {\r\n  //     if (pendingCreation === null) {\r\n  //       setActive([null, null]);\r\n  //     }\r\n  //   },\r\n  //   [pendingCreation],\r\n  // );\r\n\r\n  const handleEventChange = useCallback<OnChangeCallback>(\r\n    (newEventDetails, id) => {\r\n\r\n      if (!dynamicEvents && newEventDetails) {\r\n        onChangeDynamicEvents({[id]: newEventDetails});\r\n        return;\r\n      }\r\n\r\n      const newEvents = {...dynamicEvents};\r\n\r\n      if (!newEventDetails) {\r\n        delete newEvents[id];\r\n      } else {\r\n        if (\r\n          isEqual(newEventDetails.range[0], newEvents[id].range[0]) &&\r\n          isEqual(newEventDetails.range[1], newEvents[id].range[1])\r\n        ) {\r\n          return;\r\n        }\r\n        newEvents[id] = newEventDetails;\r\n\r\n      }\r\n\r\n      onChangeDynamicEvents(newEvents);\r\n    },\r\n    [dynamicEvents, onChangeDynamicEvents],\r\n  );\r\n\r\n  const getIsActive = useCallback(\r\n    ({ rangeId, cellIndex }) => {\r\n      return rangeId === activeRangeId && cellIndex === activeCellIndex;\r\n    },\r\n    [activeCellIndex, activeRangeId],\r\n  );\r\n\r\n\r\n  // useEffect(\r\n  //   function cancelPendingCreationOnSizeChange() {\r\n  //     cancel();\r\n  //   },\r\n  //   [size, cancel],\r\n  // );\r\n\r\n  useEffect(\r\n    function scrollToActiveTimeBlock() {\r\n      if (!document.activeElement) {\r\n        return;\r\n      }\r\n\r\n      if (!root.current || !root.current.contains(document.activeElement)) {\r\n        return;\r\n      }\r\n\r\n      scrollIntoView(document.activeElement, {\r\n        scrollMode: 'if-needed',\r\n        block: 'nearest',\r\n        inline: 'nearest',\r\n      });\r\n    },\r\n    [staticEvents, dynamicEvents],\r\n  );\r\n\r\n  \r\n  const [wasInitialScrollPerformed, setWasInitialScrollPerformed] = useState(\r\n    false,\r\n  );\r\n\r\n  useEffect(\r\n    function performInitialScroll() {\r\n      if (wasInitialScrollPerformed || !root.current || !grid) {\r\n        return;\r\n      }\r\n\r\n      const range = dateRangeToCells(\r\n        getEarliestTimeRange({...dynamicEvents,...staticEvents}) || [\r\n          addHours(originDate, defaultHours[0]),\r\n          addHours(originDate, defaultHours[1]),\r\n        ],\r\n      );\r\n      const rect = grid.getRectFromCell(range[0]);\r\n      const { top, bottom } = rect;\r\n\r\n      if (top === 0 && bottom === 0) {\r\n        return;\r\n      }\r\n\r\n      // IE, Edge do not support it\r\n      if (!('scrollBy' in root.current)) {\r\n        return;\r\n      }\r\n\r\n      root.current.scrollBy(0, top);\r\n\r\n      setWasInitialScrollPerformed(true);\r\n    },\r\n    [\r\n      wasInitialScrollPerformed,\r\n      grid,\r\n      staticEvents,\r\n      dynamicEvents,\r\n      defaultHours,\r\n      originDate,\r\n      dateRangeToCells,\r\n    ],\r\n  );\r\n\r\n  const handleBlur: React.FocusEventHandler = useCallback(\r\n    event => {\r\n      if (!event.target.contains(document.activeElement)) {\r\n        setActive([null, null]);\r\n      }\r\n    },\r\n    [setActive],\r\n  );\r\n\r\n\r\n  const handleCellClick = useCallback(\r\n    (dayIndex: number, timeIndex: number) => (event: React.MouseEvent) => {\r\n      if (!grid || newEventsAddedTo === \"none\") {\r\n        return;\r\n      }\r\n\r\n      const spanY = toY(cellClickPrecision);\r\n      const precisionedTimeIndex = timeIndex * (verticalPrecision / visualGridVerticalPrecision);\r\n      const cell = {\r\n        startX: dayIndex,\r\n        startY: precisionedTimeIndex,\r\n        endX: dayIndex,\r\n        endY: spanY + precisionedTimeIndex,\r\n        spanY,\r\n        spanX: getSpan(dayIndex, dayIndex),\r\n      };\r\n\r\n      const dateRanges = cellInfoToDateRanges(cell);\r\n\r\n      let events : Events = {};\r\n\r\n      dateRanges.forEach(dateRange => { events = {...events, ...generateEvent({ range: dateRange })}});\r\n\r\n      if (checkValidDateRange(\"\", dateRanges[0])){\r\n        // setPendingCreation(events);\r\n\r\n        if (newEventsAddedTo === 'dynamic')\r\n          onChangeDynamicEvents(mergeEvents(dynamicEvents, events));\r\n\r\n        if (newEventsAddedTo === 'static')\r\n          onChangeStaticEvents(mergeEvents(staticEvents, events));\r\n      }\r\n\r\n      event.stopPropagation();\r\n      event.preventDefault();\r\n    },\r\n    [grid, newEventsAddedTo, toY, cellClickPrecision, cellInfoToDateRanges, generateEvent, checkValidDateRange, verticalPrecision, visualGridVerticalPrecision]\r\n  );\r\n\r\n\r\n\r\n  const baseRect = grid?.getRectFromCell({\r\n    startX: 0,\r\n    startY: 0,\r\n    endX: 0,\r\n    endY: 0,\r\n    spanX: 1,\r\n    spanY: 1,\r\n  });\r\n\r\n  return (\r\n    <div className={styles.root} style={{ height, width}}>\r\n      <div className={styles[\"scheduler-header\"]}>\r\n        <div className={styles[\"week-of-indicator\"]}>\r\n          Week of: {startOfWeek.format(\"L\")} - {endOfWeek.format(\"L\")}\r\n        </div>\r\n      </div>\r\n      <div className={styles[\"scheduler-body\"]} onBlur={handleBlur}>\r\n        <div className={styles[\"scheduler-table\"]} ref={root}>\r\n          <div className={styles[\"layer-container\"]} ref={schedulerRef}>\r\n            \r\n            {grid && (\r\n              <Bounds \r\n                dateRangeToCells={dateRangeToCells}\r\n                grid={grid}\r\n                hours={hours}\r\n                closedDaysTimes={closedDaysTimes}\r\n                startOfWeek={startOfWeek}\r\n              />)\r\n            }\r\n            {/* {isDragging && (\r\n              <div className=\"drag-box\" style={dragBoxStyle}>\r\n                {hasFinishedDragging && <div className=\"popup\" />}\r\n              </div>\r\n            )} */}\r\n            {/* {grid && dynamicEvents && pendingCreation && (\r\n              <Schedule\r\n                events={newEventsAddedTo === 'dynamic' ? mergeEvents(dynamicEvents, pendingCreation): dynamicEvents}\r\n                dateRangeToCells={dateRangeToCells}\r\n                grid={grid}\r\n                moveAxis=\"none\"\r\n                cellInfoToDateRange={cellInfoToSingleDateRange}\r\n                checkValidDateRange={checkValidDateRange}\r\n                getIsActive={getIsActive}\r\n                eventContentComponent={eventContentComponent}\r\n                type=\"dynamic\"\r\n                className=\"dynamic is-pending-creation\"\r\n              />\r\n            )} */}\r\n            {grid && dynamicEvents && (\r\n              <Schedule\r\n                events={dynamicEvents}\r\n                isMovable\r\n                dateRangeToCells={dateRangeToCells}\r\n                grid={grid}\r\n                moveAxis=\"both\"\r\n                isResizable\r\n                isDeletable\r\n                cellInfoToDateRange={cellInfoToSingleDateRange}\r\n                onChange={handleEventChange}\r\n                checkValidDateRange={checkValidDateRange}\r\n                onActiveChange={setActive}\r\n                onClick={onEventClick}\r\n                getIsActive={getIsActive}\r\n                disableDelete={disableDelete}\r\n                eventContentComponent={eventContentComponent}\r\n                eventRootComponent={eventRootComponent}\r\n                type=\"dynamic\"\r\n                className={styles.dynamic}\r\n              />\r\n            )}\r\n            {/* {grid && staticEvents && pendingCreation && (\r\n              <Schedule\r\n                events={newEventsAddedTo === 'static' ? mergeEvents(staticEvents, pendingCreation): staticEvents}\r\n                dateRangeToCells={dateRangeToCells}\r\n                grid={grid}\r\n                moveAxis=\"none\"\r\n                cellInfoToDateRange={cellInfoToSingleDateRange}\r\n                checkValidDateRange={checkValidDateRange}\r\n                getIsActive={getIsActive}\r\n                eventContentComponent={eventContentComponent}\r\n                type=\"static\"\r\n                className=\"static is-pending-creation\"\r\n              />\r\n            )} */}\r\n            {grid && staticEvents && (\r\n              <Schedule\r\n                events={staticEvents}\r\n                dateRangeToCells={dateRangeToCells}\r\n                grid={grid}\r\n                moveAxis=\"none\"\r\n                cellInfoToDateRange={cellInfoToSingleDateRange}\r\n                checkValidDateRange={checkValidDateRange}\r\n                onActiveChange={setActive}\r\n                onClick={onEventClick}\r\n                getIsActive={getIsActive}\r\n                disableDelete={disableDelete}\r\n                eventContentComponent={eventContentComponent}\r\n                eventRootComponent={eventRootComponent}\r\n                type=\"static\"\r\n                className={styles.static}\r\n              />\r\n            )}\r\n            <div className={styles.calendar} ref={parentRef}>\r\n              {daysOfWeek.map((dayOfWeek) => (\r\n                <div key={dayOfWeek} className={styles[\"day-column\"]}>\r\n                  {times.map((timeIndex) => (\r\n                    <Cell\r\n                      rect={grid?.getRectFromCell({\r\n                        startX: dayOfWeek,\r\n                        startY: timeIndex,\r\n                        endX: dayOfWeek + 1,\r\n                        endY: timeIndex + 1,\r\n                        spanX: 1,\r\n                        spanY: 1,\r\n                      })}\r\n                      key={timeIndex}\r\n                      onClick={handleCellClick(\r\n                        dayOfWeek,\r\n                        timeIndex *\r\n                          (numVerticalCells / numVisualVerticalCells),\r\n                      )}\r\n                      timeIndex={timeIndex}\r\n                    >\r\n                      {/* {dayOfWeek}x{timeIndex} */}\r\n                    </Cell>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={`${styles.timeline} ${styles[\"sticky-left\"]}`}>\r\n            {times.map((timeIndex) => (\r\n              <div\r\n                className={styles[\"day-hour\"]}\r\n                style={{ height: baseRect?.height }}\r\n                key={timeIndex}\r\n              >\r\n                <div className={styles[\"time-label\"]}>\r\n                  {moment()\r\n                    .hours(0)\r\n                    .minutes(timeIndex * visualGridVerticalPrecision)\r\n                    .format(\"HH:mm\")}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className={`${styles[\"day-labels\"]} ${styles[\"sticky-top\"]}`}>\r\n            <div className={styles.header}>\r\n              <div className={styles[\"sticky-left\"]} />\r\n\r\n              {daysOfWeek.map((dayOfWeek) => (\r\n                <div\r\n                  key={dayOfWeek}\r\n                  className={styles[\"day-column\"]}\r\n                  style={{ width: baseRect?.width }}\r\n                >\r\n                  {startOfWeek.clone().add(dayOfWeek, \"d\").format(\"ddd. DD\")}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(WeekScheduler);\r\n","/* eslint-disable prettier/prettier */\r\nimport moment from 'moment';\r\nimport { CellInfo, DateRange } from '../types';\r\nimport { getSpan } from './getSpan';\r\nimport { differenceInDays, differenceInMinutes, range } from './utility';\r\n\r\nexport const createMapDateRangeToCells = ({\r\n  toX = (x: number) => x,\r\n  toY,\r\n  numVerticalCells,\r\n  originDate,\r\n}: {\r\n  toX: (day: number) => number;\r\n  toY: (min: number) => number;\r\n  numHorizontalCells: number;\r\n  numVerticalCells: number;\r\n  originDate: Date;\r\n}) => ([start, end]: DateRange): CellInfo[] => {\r\n  const originOfThisDay = moment(start).startOf('day');\r\n  // origin date will always be the start of the week\r\n\r\n  // difference in days will always compare the start of the days at 12:00am\r\n  const _startX = toX(differenceInDays(start, originDate));\r\n  const _startY = toY(differenceInMinutes(start, originOfThisDay.toDate()));\r\n  const _endX = toX(differenceInDays(end, originDate));\r\n  const _endY = toY(differenceInMinutes(end, moment(end).startOf('day').toDate())) - 1;\r\n\r\n  let cells = range(_startX, _endX + 1).map(i => {\r\n    const startX = i;\r\n    const endX = i;\r\n    const atStart = i === _startX;\r\n    const atEnd = i === _endX;\r\n    const startY = !atStart ? 0 : _startY;\r\n    const endY = !atEnd ? numVerticalCells - 1 : _endY;\r\n    const spanX = getSpan(startX, endX);\r\n    const spanY = getSpan(startY, endY);\r\n\r\n    return {\r\n      startX,\r\n      startY,\r\n      endX,\r\n      endY,\r\n      spanX,\r\n      spanY,\r\n    };\r\n  });\r\n\r\n  if (moment(end).isSame(moment(end).startOf('day'))) {\r\n    cells.pop();\r\n  }\r\n\r\n\r\n  // filter the cells that are between the 0 days from the originDate (start of week) and 6 days\r\n  cells = cells.filter(({ startX, endX }) => (startX >= 0 && startX <= 6) && (endX >= 0 && endX <= 6));\r\n\r\n  return cells;\r\n};\r\n","/* eslint-disable prettier/prettier */\r\nimport compareAsc from 'date-fns/compareAsc';\r\nimport setDay from 'date-fns/setDay';\r\nimport { Events } from '../components/WeekScheduler/WeekScheduler';\r\nimport { DateRange } from '../types';\r\n\r\nexport function getEarliestTimeRange(\r\n  events: Events,\r\n): DateRange | undefined {\r\n  return Object.values(events).map(ed => ed.range).sort(([startA], [startB]) =>\r\n    compareAsc(setDay(startA, 0), setDay(startB, 0)),\r\n  )[0];\r\n}\r\n","import Tippy from '@tippyjs/react'\nimport moment from 'moment'\nimport React, { useMemo, useState } from 'react'\nimport 'tippy.js/dist/tippy.css';\nimport './App.css'\n\nimport {\n  clampWrapInclusive,\n  ClosedDaysTimes,\n  DefaultEventRootComponent,\n  EventContentProps,\n  EventDetails,\n  EventRootProps,\n  Events,\n  Hours,\n  WeekScheduler\n} from 'react-week-schedulr'\nimport 'react-week-schedulr/dist/index.css'\n\nconst EventRoot = React.forwardRef<any, EventRootProps>(function EventRoot(\n  { handleDelete, disableDelete, type, ...props },\n  ref\n) {\n  return (\n    <Tippy\n      arrow\n      interactive\n      disabled={disableDelete || type === 'static'}\n      hideOnClick={false}\n      className='tooltip'\n      content={\n        <button disabled={disableDelete} onClick={handleDelete}>\n          Delete\n        </button>\n      }\n    >\n      <DefaultEventRootComponent\n        handleDelete={handleDelete}\n        disableDelete={disableDelete}\n        type={type}\n        {...props}\n        ref={ref}\n      />\n    </Tippy>\n  )\n})\n\nconst renderContent = ({ details, dateRange, type }: EventContentProps) => {\n  return (\n    <div className='event-content' style={{ textAlign: 'center' }}>\n      {' '}\n      {/* give className of event-content for padding */}\n      {type === 'static' ? (\n        <>Can't view details</>\n      ) : (\n        <>\n          {details.title ? details.title : 'No Title'}\n          <div>\n            {moment(dateRange[0]).format('lll')} -{' '}\n            {moment(dateRange[1]).format('lll')}\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n\nconst generateEvent = (eventDetails: EventDetails): Events => {\n  const id = String(Math.random())\n  return { [id]: { ...eventDetails, title: 'newEvent ' + id } }\n}\n\nconst initialDynamicEvents: Events = {\n  '1': { range: [new Date(2021, 8, 22, 12), new Date(2021, 8, 22, 13)] },\n  '2': {\n    range: [new Date(2021, 8, 23, 14), new Date(2021, 8, 24, 15)],\n    title: 'work time'\n  }\n}\n\nconst initialStaticEvents: Events = {\n  '3': {\n    range: [new Date(2021, 8, 23, 3), new Date(2021, 8, 23, 5)],\n    title: 'break time static'\n  },\n  '4': {\n    range: [new Date(2021, 8, 23, 6), new Date(2021, 8, 23, 8)],\n    title: 'work time static'\n  }\n}\n\nconst hours: Hours = {\n  2: [new Date(2021, 7, 23, 3), new Date(2021, 7, 23, 16)]\n}\n\nconst closedDaysTimes: ClosedDaysTimes = [\n  [new Date(2021, 8, 20, 12), new Date(2021, 8, 20, 16)]\n]\n\nconst weeks = [0, 1, 2, 3, 4]\nconst originDate = new Date(2021, 8, 23)\n\nconst App = () => {\n  const [currentYear, setCurrentYear] = useState(originDate.getFullYear())\n  const [currentMonth, setCurrentMonth] = useState(originDate.getMonth())\n  const [currentWeek, setCurrentWeek] = useState(\n    Math.ceil(\n      (originDate.getDate() + new Date(currentYear, currentMonth, 1).getDay()) /\n        7\n    ) - 1\n  )\n\n  const [events, setEvents] = useState(initialDynamicEvents)\n  const [staticEvents, setStaticEvents] = useState<Events>(initialStaticEvents)\n\n  const addMonth = (amount: 1 | -1) => {\n    if (currentMonth === 11 && amount === 1)\n      setCurrentYear((current) => current + 1)\n    if (currentMonth === 0 && amount === -1)\n      setCurrentYear((current) => current - 1)\n    setCurrentMonth((current) => clampWrapInclusive(current + amount, 0, 11))\n    setCurrentWeek(0)\n  }\n\n  const originDay = useMemo(() => {\n    const startDayOfMonth = moment(new Date(currentYear, currentMonth, 1))\n    return startDayOfMonth.add(currentWeek, 'w').toDate()\n  }, [currentYear, currentMonth, currentWeek])\n  return (\n    <div className='App'>\n      <div className='scheduler-year'>\n        <button className='month-button' onClick={() => addMonth(-1)}>\n          {' '}\n          {'<'}{' '}\n        </button>\n        <span>\n          {moment(new Date(currentYear, currentMonth)).format(\"MMM' YYYY\")}\n        </span>\n        <button className='month-button' onClick={() => addMonth(1)}>\n          {' '}\n          {'>'}{' '}\n        </button>\n      </div>\n      <div className='week-navigator'>\n        {weeks.map((element, index) => (\n          <button\n            key={element}\n            onClick={() => setCurrentWeek(index)}\n            className={`week-indicator ${\n              currentWeek === index ? 'current' : ''\n            }`}\n          />\n        ))}\n      </div>\n      <WeekScheduler\n        // cellWidth={150}\n        // width=\"100%\"\n        cellHeight={100}\n        height='710px'\n        dynamicEvents={events}\n        onChangeDynamicEvents={setEvents}\n        staticEvents={staticEvents}\n        onChangeStaticEvents={setStaticEvents}\n        newEventsAddedTo='dynamic'\n        generateEvent={generateEvent}\n        cellClickPrecision={120}\n        hours={hours}\n        closedDaysTimes={closedDaysTimes}\n        eventsOverlap\n        eventRootComponent={EventRoot}\n        eventContentComponent={renderContent}\n        maxVerticalPrecision={360}\n        verticalPrecision={5}\n        visualGridVerticalPrecision={120}\n        originDate={originDay}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}