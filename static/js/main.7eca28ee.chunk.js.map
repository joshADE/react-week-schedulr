{"version":3,"sources":["../../src/components/EventRootComponent/DefaultEventRootComponent.tsx","../../src/components/Cell/Cell.tsx","../../src/utils/getSpan.ts","../../src/utils/utility.ts","../../src/utils/createGrid.ts","../../src/components/EventContent/EventContent.tsx","../../src/components/RangeBox/RangeBox.tsx","../../src/components/Schedule/Schedule.tsx","../../src/utils/createMapCellInfoToRecurringTimeRange.ts","../../src/utils/cellToDate.ts","../../src/utils/mergeEvents.ts","../../src/components/Bounds/Bounds.tsx","../../src/components/WeekScheduler/WeekScheduler.tsx","../../src/utils/createMapDateRangeToCells.ts","../../src/utils/getEarliestTimeRange.ts","App.tsx","index.tsx"],"names":["DefaultEventRootComponent","props","React","ref","Cell","rect","onClick","children","style","top","left","width","height","className","styles","cell","getSpan","x1","x2","clamp","num","min","max","range","from","to","result","i","differenceInDays","end","start","asDays","moment","Math","differenceInMinutes","EventContent","dateRange","isStart","isEnd","memo","grid","id","cellIndex","rangeIndex","details","moveAxis","cellInfoToDateRange","onChange","checkValidDateRange","cellArray","isResizable","isMovable","onActiveChange","getIsActive","disableDelete","type","eventRootComponent","EventRootComponent","eventContentComponent","useRef","useState","modifiedCell","setModifiedCell","tempCell","setTempCell","isModifying","setModifying","originalRect","useMemo","useEffect","modifiedDateRange","isActive","rangeId","handleStop","useCallback","handleStart","handleDrag","y","x","event","newRect","startOrEnd1","startOrEnd2","newTop","newBottom","newLeft","newRight","startY","startX","newCell","endX","endY","invariant","handleResize","delta","maxHeight","cellHeight","newSize","console","direction","spanY","handleDelete","undefined","handleOnFocus","handleOnClick","eventContentProps","originalTop","originalLeft","originalWidth","originalHeight","axis","bounds","bottom","right","position","onStart","onDrag","onStop","handle","tabIndex","role","onFocus","size","key","onResizeStart","onResize","onResizeStop","handleWrapperClass","enable","handleClasses","bottomLeft","bottomRight","topLeft","topRight","events","dateRangeToCells","isDeletable","Object","e","entryIndex","entries","length","createMapCellInfoToRecurringTimeRange","toMin","toDay","originDate","startDate","cellToDate","endDate","compareAsc","range1","range2","mergeEvents","event1","event2","hours","closedDaysTimes","startOfWeek","cdtIndex","h","daysOfWeek","toX","days","Date","cellWidth","visualGridVerticalPrecision","verticalPrecision","defaultHours","maxVerticalPrecision","NumberOfMinutesInADay","cellClickPrecision","dynamicEvents","staticEvents","onChangeStaticEvents","onChangeDynamicEvents","newEventsAddedTo","eventsOverlap","generateEvent","onEventClick","numVerticalCells","numVisualVerticalCells","times","schedulerRef","parentRef","root","totalHeight","totalWidth","setDimensions","useComponentSize","toY","mins","endOfWeek","originOfThisDay","_startX","_startY","_endX","_endY","cells","spanX","createMapDateRangeToCells","numHorizontalCells","cellInfoToDateRanges","fromY","fromX","cellInfoToSingleDateRange","first","rest","JSON","maxRangeHeightSpan","cellPrecisionHeight","maxRectHeight","getRectFromCell","data","this","getCellFromRect","dragging","createGrid","dayOfWeek","isWithinInterval","closedDayTime","allEvents","value","activeRangeId","activeCellIndex","setActive","handleEventChange","newEvents","isEqual","newEventDetails","document","scrollIntoView","scrollMode","block","inline","wasInitialScrollPerformed","setWasInitialScrollPerformed","getEarliestTimeRange","ed","startA","startB","setDay","addHours","handleBlur","handleCellClick","precisionedTimeIndex","timeIndex","dayIndex","dateRanges","baseRect","onBlur","dynamic","calendar","header","EventRoot","forwardRef","arrow","interactive","disabled","hideOnClick","content","renderContent","textAlign","title","format","eventDetails","String","random","initialDynamicEvents","initialStaticEvents","2","weeks","App","getFullYear","currentYear","setCurrentYear","getMonth","currentMonth","setCurrentMonth","ceil","getDate","getDay","currentWeek","setCurrentWeek","setEvents","setStaticEvents","addMonth","amount","current","val","N","newval","clampWrapInclusive","originDay","add","toDate","map","element","index","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7eca28ee.chunk.js","sourcesContent":["/* eslint-disable prettier/prettier */\r\nimport React from 'react';\r\nimport { EventRootProps } from '../../types';\r\n\r\n\r\nexport const DefaultEventRootComponent =  React.memo(\r\n    React.forwardRef<any, EventRootProps>(function DefaultEventRootComponent(\r\n    {\r\n      isActive,\r\n      handleDelete,\r\n      id,\r\n      cellIndex,\r\n      rangeIndex,\r\n      disableDelete,\r\n      type,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) {\r\n\r\n    return <div ref={ref} {...props} />;\r\n  }),\r\n);\r\n\r\n\r\n","/* eslint-disable prettier/prettier */\r\nimport React from \"react\";\r\nimport { Rect } from \"../../types\";\r\nimport styles from '../WeekScheduler/WeekScheduler.module.css'\r\n\r\ninterface CellProps {\r\n  rect?: Rect;\r\n  onClick?: React.MouseEventHandler;\r\n  timeIndex: number;\r\n  \r\n}\r\n\r\nexport const Cell: React.FC<CellProps> = ({\r\n  rect,\r\n  onClick,\r\n  children,\r\n}) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        top: rect?.top,\r\n        left: rect?.left,\r\n        width: rect?.width,\r\n        height: rect?.height,\r\n      }}\r\n      className={styles.cell}\r\n      onClick={onClick}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","/* eslint-disable prettier/prettier */\r\nexport const getSpan = (x1: number, x2: number) => 1 + (x2 - x1);\r\n","/* eslint-disable prettier/prettier */\r\nimport moment from \"moment\";\r\n\r\nexport function clamp(num: number, min: number, max: number) {\r\n    return num <= min ? min : num >= max ? max : num;\r\n}\r\n\r\nexport function clampWrapInclusive(val: number, min: number, max: number) {\r\n    const N = Math.abs(max - min);\r\n    let newval = 0;\r\n    if (val < min)\r\n        newval = (max + 1) - ((Math.abs(min - val) % (N + 1) !== 0) ? Math.abs(min - val) % (N + 1) : (N + 1));\r\n    else if (val > max)\r\n        newval = (min - 1) + ((Math.abs(max - val) % (N + 1) !== 0) ? Math.abs(max - val) % (N + 1) : (N + 1));\r\n    else\r\n        newval = val;\r\n    return newval;\r\n}\r\n\r\nexport function range(from: number, to: number){\r\n    const result = [];\r\n    for (let i = from; i < to; i++){\r\n        result.push(i);\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function differenceInDays(end: Date, start: Date){\r\n    const duration = moment.duration(moment(end).startOf('day').diff(moment(start).startOf('day')));\r\n    const asDays = duration.asDays();\r\n    return Math.trunc(asDays);\r\n}\r\n\r\nexport function differenceInMinutes(end: Date, start: Date){\r\n    const duration = moment.duration(moment(end).diff(moment(start)));\r\n    return duration.asMinutes();\r\n}\r\n","/* eslint-disable prettier/prettier */\r\nimport { CellInfo, Grid, Rect } from \"../types\";\r\nimport { getSpan } from \"./getSpan\";\r\nimport { clamp } from \"./utility\";\r\n\r\n\r\nexport const createGrid = ({\r\n    totalHeight,\r\n    totalWidth,\r\n    numVerticalCells,\r\n    numHorizontalCells,\r\n    numVisualVerticalCells,\r\n    maxRangeHeightSpan,\r\n  }: {\r\n    totalHeight: number;\r\n    totalWidth: number;\r\n    numVerticalCells: number;\r\n    numHorizontalCells: number;\r\n    numVisualVerticalCells: number;\r\n    maxRangeHeightSpan: number;\r\n  }): Grid => {\r\n    const cellHeight = totalHeight / numVisualVerticalCells;\r\n    const cellWidth = totalWidth / numHorizontalCells;\r\n    const cellPrecisionHeight = totalHeight / numVerticalCells;\r\n    return {\r\n      totalHeight,\r\n      totalWidth,\r\n      numVerticalCells,\r\n      numHorizontalCells,\r\n      cellWidth,\r\n      cellHeight,\r\n      maxRectHeight: cellHeight * maxRangeHeightSpan,\r\n  \r\n      getRectFromCell(data: CellInfo) {\r\n        const { endX, startX, endY, startY, spanX, spanY } = data;\r\n        const bottom = endY * this.cellHeight;\r\n        const top = startY * this.cellHeight;\r\n        const left = startX * this.cellWidth;\r\n        const right = endX * this.cellWidth;\r\n        const height = spanY * this.cellHeight;\r\n        const width = spanX * this.cellWidth;\r\n  \r\n        return {\r\n          bottom,\r\n          top,\r\n          left,\r\n          right,\r\n          height,\r\n          width,\r\n  \r\n          // @TODO: check the math\r\n          startX: startX * this.cellWidth,\r\n          endX: endX * this.cellWidth,\r\n          startY: startY * this.cellHeight,\r\n          endY: endY * this.cellHeight,\r\n        };\r\n      },\r\n  \r\n      getCellFromRect(data: Rect, dragging = false) {\r\n\r\n        let startX, startY, endX, endY;\r\n\r\n        if (dragging){\r\n          startX = clamp(\r\n            Math.floor(data.left / this.cellWidth),\r\n            0,\r\n            numHorizontalCells - 1,\r\n          );\r\n          startY = \r\n            Math.floor(data.top / cellPrecisionHeight) \r\n            * (numVisualVerticalCells / numVerticalCells);\r\n          endX = clamp(\r\n            Math.floor(data.right / this.cellWidth),\r\n            0,\r\n            numHorizontalCells - 1,\r\n          );\r\n          endY = \r\n            Math.floor((data.bottom - cellHeight) / cellPrecisionHeight)\r\n            * (numVisualVerticalCells / numVerticalCells);\r\n        }else{\r\n          startX = clamp(\r\n            Math.round(data.left / this.cellWidth),\r\n            0,\r\n            numHorizontalCells - 1,\r\n          );\r\n          startY = \r\n          Math.round(data.top / cellPrecisionHeight)\r\n          * (numVisualVerticalCells / numVerticalCells);\r\n          endX = clamp(\r\n            Math.round(data.right / this.cellWidth),\r\n            0,\r\n            numHorizontalCells - 1,\r\n          );\r\n          endY = \r\n            Math.round(data.bottom / cellPrecisionHeight)\r\n            * (numVisualVerticalCells / numVerticalCells);\r\n        }\r\n        const spanX = clamp(getSpan(startX, endX), 1, numHorizontalCells);\r\n        const spanY = clamp(getSpan(startY, endY), (numVisualVerticalCells / numVerticalCells), maxRangeHeightSpan);\r\n        return {\r\n          spanX,\r\n          spanY,\r\n          startX,\r\n          startY,\r\n          endX,\r\n          endY,\r\n        };\r\n      },\r\n    };\r\n  };","/* eslint-disable prettier/prettier */\r\nimport moment from 'moment';\r\nimport React from 'react'\r\nimport { EventDetails } from '../WeekScheduler/WeekScheduler';\r\nimport styles from '../WeekScheduler/WeekScheduler.module.css'\r\n\r\nexport type EventContentProps = {\r\n    width: number;\r\n    height: number;\r\n    dateRange: [Date, Date];\r\n    isStart: boolean;\r\n    isEnd: boolean;\r\n    type: 'dynamic' | 'static';\r\n    details: EventDetails;\r\n    id: string;\r\n    cellIndex: number;\r\n};\r\n  \r\nexport const EventContent = React.memo(function EventContent({\r\nwidth,\r\nheight,\r\ndateRange,\r\nisStart,\r\nisEnd,\r\n}: EventContentProps) {\r\n\r\n\r\nreturn (\r\n    <div\r\n    style={{ width, height }}\r\n    className={styles[\"event-content\"]}\r\n    >\r\n    <span aria-hidden className={styles.start}>\r\n        {isStart && moment(dateRange[0]).format('lll')}\r\n    </span>\r\n    {isStart && isEnd && <span> - </span>}\r\n    <span aria-hidden className={styles.end}>\r\n        {isEnd && moment(dateRange[1]).format('lll')}\r\n    </span>\r\n    </div>\r\n);\r\n});\r\n  ","/* eslint-disable prettier/prettier */\r\nimport React, { useCallback, useEffect, useMemo, useRef, useState, memo } from 'react'\r\nimport { CellInfo, Grid } from '../../types';\r\nimport { SharedScheduleProps } from '../Schedule/Schedule';\r\nimport { EventDetails } from '../WeekScheduler/WeekScheduler';\r\nimport { Resizable, ResizeCallback } from 're-resizable';\r\nimport Draggable, { DraggableEventHandler } from 'react-draggable';\r\nimport invariant from 'invariant';\r\nimport { DefaultEventRootComponent } from '../EventRootComponent/DefaultEventRootComponent';\r\nimport { EventContent, EventContentProps } from '../EventContent/EventContent';\r\nimport { clamp } from '../../utils/utility';\r\nimport styles from '../WeekScheduler/WeekScheduler.module.css'\r\n\r\n\r\ninterface RangeBoxProps {\r\n    cell: CellInfo;\r\n    grid: Grid;\r\n    id: string;\r\n    details: EventDetails;\r\n    cellIndex: number;\r\n    rangeIndex: number;\r\n    cellArray: CellInfo[];\r\n}\r\n// memo at bottom of file\r\nconst RangeBox: React.FC<RangeBoxProps & SharedScheduleProps> = ({\r\n    cell,\r\n    grid,\r\n    id,\r\n    cellIndex,\r\n    rangeIndex,\r\n    details,\r\n    moveAxis,\r\n    cellInfoToDateRange,\r\n    onChange,\r\n    checkValidDateRange,\r\n    cellArray,\r\n    isResizable,\r\n    isMovable,\r\n    onActiveChange,\r\n    onClick,\r\n    getIsActive,\r\n    disableDelete,\r\n    type,\r\n    className,\r\n    eventRootComponent: EventRootComponent = DefaultEventRootComponent,\r\n    eventContentComponent,\r\n}) => {\r\n    const ref = useRef(null);\r\n    const [modifiedCell, setModifiedCell] = useState(cell);\r\n    const [tempCell, setTempCell] = useState(modifiedCell);\r\n    const [isModifying, setModifying] = useState(false);\r\n    const originalRect = useMemo(() => grid.getRectFromCell(cell), [cell, grid]);\r\n    const rect = useMemo(() => grid.getRectFromCell(modifiedCell), [\r\n      modifiedCell,\r\n      grid,\r\n    ]);\r\n\r\n   \r\n    useEffect(() => {\r\n      setModifiedCell(cell);\r\n    }, [cell]);\r\n  \r\n    const modifiedDateRange = useMemo(() => cellInfoToDateRange(modifiedCell), [\r\n      cellInfoToDateRange,\r\n      modifiedCell,\r\n    ]);\r\n\r\n    const isActive = useMemo(() => getIsActive({ cellIndex, rangeId: id }), [\r\n      cellIndex,\r\n      id,\r\n      getIsActive,\r\n    ]);\r\n\r\n\r\n      const handleStop = useCallback(() => {\r\n        setModifying(false);\r\n        if (!onChange) {\r\n          return;\r\n        }\r\n        \r\n          \r\n  \r\n          if (checkValidDateRange(id, cellInfoToDateRange(modifiedCell))){\r\n            \r\n            \r\n            onChange({...details, range: cellInfoToDateRange(modifiedCell)}, id);\r\n          }else{\r\n            setModifiedCell(tempCell);\r\n          }\r\n  \r\n        }, [tempCell, modifiedCell, setModifiedCell, id, details, cellInfoToDateRange, onChange, checkValidDateRange, setModifying]);\r\n  \r\n        const handleStart = useCallback(() => {\r\n          \r\n          \r\n          setModifying(true);\r\n          setTempCell(modifiedCell);\r\n          \r\n    \r\n          }, [modifiedCell, setTempCell, setModifying]);\r\n    \r\n\r\n    const handleDrag: DraggableEventHandler = useCallback(\r\n        (event, { y, x }) => {\r\n          if (moveAxis === 'none') {\r\n            return;\r\n          }\r\n    \r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n    \r\n          const newRect = {\r\n            ...rect,\r\n          };\r\n    \r\n          if (moveAxis === 'both' || moveAxis === 'y') {\r\n            const startOrEnd1 = y;\r\n            const startOrEnd2 = startOrEnd1 + rect.height;\r\n            const newTop = Math.min(startOrEnd1, startOrEnd2);\r\n            const newBottom = newTop + rect.height;\r\n            newRect.bottom = newBottom;\r\n            newRect.top = newTop;\r\n          }\r\n    \r\n          if (moveAxis === 'both' || moveAxis === 'x') {\r\n            const startOrEnd1 = x;\r\n            const startOrEnd2 = startOrEnd1 + rect.width;\r\n            const newLeft = Math.min(startOrEnd1, startOrEnd2);\r\n            const newRight = newLeft + rect.width;\r\n            newRect.right = newRight;\r\n            newRect.left = newLeft;\r\n          }\r\n    \r\n          const { startY, startX } = grid.getCellFromRect(newRect);\r\n    \r\n          const newCell = {\r\n            ...cell,\r\n            startX: moveAxis === 'y' ? cell.startX : startX,\r\n            endX: moveAxis === 'x' || moveAxis === 'both' ? startX + cell.spanX - 1 : cell.endX,\r\n            startY: moveAxis === 'x' ? cell.startY : startY,\r\n            endY: moveAxis === 'y' || moveAxis === 'both' ? startY + cell.spanY - 1 : cell.endY,\r\n          };\r\n    \r\n          invariant(\r\n            newCell.spanY === cell.spanY && newCell.spanX === cell.spanX,\r\n            `Expected the dragged time cell to have the same dimensions`,\r\n          );\r\n    \r\n          setModifiedCell(newCell);\r\n          setModifying(true);\r\n        },\r\n        [grid, rect, moveAxis, cell, setModifiedCell, setModifying],\r\n      );\r\n\r\n\r\n\r\n      const handleResize: ResizeCallback = useCallback(\r\n        (event, direction, _ref, delta) => {\r\n          if (!isResizable) {\r\n            return;\r\n          }\r\n    \r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n    \r\n          if (delta.height === 0) {\r\n            return;\r\n          }\r\n\r\n          const maxHeight = grid.maxRectHeight;\r\n          const cellHeight = grid.cellHeight;\r\n    \r\n          const newSize = {\r\n            height: delta.height + rect.height,\r\n            width: delta.width + rect.width,\r\n          };\r\n    \r\n          const newRect = {\r\n            ...originalRect,\r\n            ...newSize,\r\n          };\r\n\r\n          console.log(maxHeight)\r\n\r\n    \r\n          if (direction.includes('top')) {\r\n            // newRect.top -= delta.height;\r\n            // this clamp is a temporary fix to solve a problem where if you \r\n            // rezise the top at max height it also moves the whole cell up instead\r\n            // not needed for bottom position\r\n            newRect.top = clamp(newRect.top - delta.height,newRect.bottom - maxHeight + cellHeight,newRect.bottom + cellHeight);\r\n          } else if (direction.includes('bottom')) {\r\n            newRect.bottom += delta.height;\r\n          }\r\n    \r\n          const { spanY, startY, endY } = grid.getCellFromRect(newRect);\r\n          const newCell = {\r\n            ...cell,\r\n            spanY,\r\n            startY,\r\n            endY,\r\n          };\r\n    \r\n          \r\n          setModifiedCell(newCell);\r\n          \r\n        },\r\n        [grid, rect, setModifiedCell, isResizable, cell, originalRect],\r\n      );\r\n\r\n      const handleDelete = useCallback(() => {\r\n        if (!onChange || disableDelete) {\r\n          return;\r\n        }\r\n    \r\n        onChange(undefined, id);\r\n      }, [onChange, disableDelete, id]);\r\n\r\n      const handleOnFocus = useCallback(() => {\r\n        if (!onActiveChange) {\r\n          return;\r\n        }\r\n    \r\n        onActiveChange([id, cellIndex]);\r\n      }, [onActiveChange, id, cellIndex]);\r\n    \r\n      const handleOnClick = useCallback(() => {\r\n        if (!onClick || !isActive) {\r\n          return;\r\n        }\r\n    \r\n        onClick([id, cellIndex]);\r\n      }, [onClick, id, isActive, cellIndex]);\r\n      \r\n  \r\n    \r\n    const { top, left, width, height } = rect;\r\n    const eventContentProps: EventContentProps = { \r\n      width, \r\n      height, \r\n      dateRange: modifiedDateRange, \r\n      isStart: cellIndex === 0, \r\n      isEnd: cellIndex === cellArray.length - 1,\r\n      id,\r\n      cellIndex,\r\n      details,\r\n      type\r\n    };\r\n    const {top: originalTop, left: originalLeft, width: originalWidth, height: originalHeight} = originalRect;\r\n        return (<div>\r\n            <Draggable\r\n                axis={moveAxis}\r\n                bounds={{\r\n                    top: 0,\r\n                    bottom: grid.totalHeight - height,\r\n                    left: 0,\r\n                    right: grid.totalWidth - width,\r\n                }}\r\n                position={{ x: left, y: top }}\r\n                onStart={handleStart}\r\n                onDrag={handleDrag}\r\n                onStop={handleStop}\r\n                handle={`.${styles[\"handle-drag\"]}`}\r\n                // cancel=\".handle, .handle.bottom, .handle.top\"\r\n            >\r\n                  <EventRootComponent\r\n                    tabIndex=\"0\"\r\n                    role=\"button\" \r\n                    disableDelete={disableDelete}\r\n                    onFocus={handleOnFocus}\r\n                    onClick={handleOnClick}\r\n                    handleDelete={handleDelete}\r\n                    cellIndex={cellIndex}\r\n                    rangeIndex={rangeIndex}\r\n                    id={id}\r\n                    isActive={isActive}\r\n                    ref={ref}\r\n                    className={`${styles[\"range-box\"]} ${styles.event} ${isModifying? styles.modifying: ''} ${isActive? styles.active: ''} ${className}`} \r\n                    style={{ width, height}}\r\n                    type={type}\r\n                  >\r\n                  {isMovable && <div className={styles[\"handle-drag\"]} />}\r\n                <Resizable\r\n                  size={{width, height}}\r\n                  key={`${rangeIndex}.${cellIndex}.${cellArray.length}.${originalRect.top}.${originalRect.left}`}\r\n                  onResizeStart={handleStart}\r\n                  onResize={handleResize}\r\n                  onResizeStop={handleStop}\r\n                  handleWrapperClass={styles[\"handle-wrapper\"]}\r\n                  enable={isResizable? { top: true, bottom: true}: {}}\r\n                  handleClasses={{\r\n                    bottom: `${styles.handle} ${styles.bottom}`,\r\n                    bottomLeft: styles.handle,\r\n                    bottomRight: styles.handle,\r\n                    left: styles.handle,\r\n                    right: styles.handle,\r\n                    top: `${styles.handle} ${styles.top}`,\r\n                    topLeft: styles.handle,\r\n                    topRight: styles.handle\r\n                  }}\r\n                > \r\n                  {eventContentComponent ? \r\n                  eventContentComponent(eventContentProps) : \r\n                  <EventContent\r\n                    {...eventContentProps}\r\n                  />\r\n                  }\r\n                    </Resizable>\r\n                </EventRootComponent>\r\n            </Draggable>\r\n            {isModifying && <div className={styles[\"original-range-box\"]} style={{ top: originalTop, left: originalLeft, width: originalWidth, height: originalHeight}} />}\r\n            </div>);\r\n}\r\n\r\nexport default memo(RangeBox)","/* eslint-disable prettier/prettier */\r\nimport React, { memo } from 'react'\r\nimport { CellInfo, DateRange, EventType, Grid, OnChangeCallback } from '../../types';\r\nimport { EventContentProps } from '../EventContent/EventContent';\r\nimport RangeBox from '../RangeBox/RangeBox';\r\nimport { Events } from '../WeekScheduler/WeekScheduler';\r\nimport styles from '../WeekScheduler/WeekScheduler.module.css'\r\n\r\nexport interface SharedScheduleProps {\r\n    onChange?: OnChangeCallback;\r\n    grid: Grid;\r\n    isResizable?: boolean;\r\n    isDeletable?: boolean;\r\n    isMovable?: boolean;\r\n    moveAxis: 'none' | 'both' | 'x' | 'y';\r\n    cellInfoToDateRange(cell: CellInfo): DateRange;\r\n    checkValidDateRange(id: string, dateRange: DateRange): boolean;\r\n    eventContentComponent?: (props: EventContentProps) => JSX.Element;\r\n    eventRootComponent?: any;\r\n    onActiveChange?(index: [string, number] | [null, null]): void;\r\n    onClick?(index: [string, number] | [null, null]): void;\r\n    getIsActive(indexes: { cellIndex: number; rangeId: string }): boolean;\r\n    disableDelete?: boolean;\r\n    type: EventType;\r\n    className?: string;\r\n}\r\n\r\ninterface ScheduleProps {\r\n    events: Events;\r\n    dateRangeToCells: (range: DateRange) => CellInfo[];\r\n}\r\n\r\nconst Schedule: React.FC<ScheduleProps & SharedScheduleProps> = ({\r\n    events,\r\n    isMovable,\r\n    dateRangeToCells,\r\n    grid,\r\n    onChange,\r\n    moveAxis,\r\n    cellInfoToDateRange,\r\n    checkValidDateRange,\r\n    isResizable,\r\n    isDeletable,\r\n    onActiveChange,\r\n    onClick,\r\n    getIsActive,\r\n    disableDelete,\r\n    eventRootComponent,\r\n    eventContentComponent,\r\n    type,\r\n    className   \r\n}) => {\r\n        return (\r\n        <div className={styles[\"range-boxes\"]}>\r\n            {\r\n                Object.entries(events).map((e, entryIndex, entries) => (\r\n                <span className={styles[\"schedule-range-group\"]} key={e[0]}>\r\n                    {dateRangeToCells(e[1].range).map((cell, cellIndex, cellArray) => \r\n                    <RangeBox \r\n                        key={`${entryIndex}.${entries.length}.${cellIndex}.${cellArray.length}`}\r\n                        cell={cell}\r\n                        grid={grid}\r\n                        id={e[0]}\r\n                        details={e[1]}\r\n                        onChange={onChange}\r\n                        moveAxis={moveAxis}\r\n                        cellInfoToDateRange={cellInfoToDateRange}\r\n                        checkValidDateRange={checkValidDateRange}\r\n                        rangeIndex={entryIndex}\r\n                        cellIndex={cellIndex}\r\n                        cellArray={cellArray}\r\n                        isResizable={isResizable}\r\n                        isDeletable={isDeletable}\r\n                        isMovable={isMovable}\r\n                        onActiveChange={onActiveChange}\r\n                        onClick={onClick}\r\n                        getIsActive={getIsActive}\r\n                        disableDelete={disableDelete}\r\n                        eventContentComponent={eventContentComponent}\r\n                        eventRootComponent={eventRootComponent}\r\n                        type={type}\r\n                        className={className}\r\n                    />)}\r\n                </span>))\r\n            }\r\n        </div>);\r\n}\r\n\r\nexport default memo(Schedule)","/* eslint-disable prettier/prettier */\r\nimport compareAsc from \"date-fns/compareAsc\";\r\nimport moment from \"moment\";\r\nimport { DateRange, MapCellInfoToDateRange } from \"../types\";\r\nimport { cellToDate } from \"./cellToDate\";\r\nimport { range } from \"./utility\";\r\n\r\nexport type RecurringTimeRange = DateRange[];\r\n\r\nexport const createMapCellInfoToRecurringTimeRange: MapCellInfoToDateRange = ({\r\n  fromY: toMin,\r\n  fromX: toDay,\r\n  originDate,\r\n}) => ({ startX, startY, endX, spanY }) => {\r\n  const result = range(startX, endX + 1)\r\n    .map(i => {\r\n      const startDate = cellToDate({\r\n        startX: i,\r\n        startY,\r\n        toMin,\r\n        toDay,\r\n        originDate,\r\n      });\r\n      const endDate = moment.min(\r\n        moment(startDate).add(toMin(spanY), 'minutes'),\r\n        moment(startDate).endOf('day'),\r\n      );\r\n\r\n      const range: DateRange = moment(startDate).isBefore(endDate)\r\n        ? [startDate.toDate(), endDate.toDate()]\r\n        : [endDate.toDate(), startDate.toDate()];\r\n\r\n      return range;\r\n    })\r\n    .sort((range1, range2) =>  compareAsc(range1[0], range2[0]));\r\n\r\n  return result;\r\n};","/* eslint-disable prettier/prettier */\r\nimport moment from \"moment\";\r\n\r\n\r\nexport const cellToDate = ({\r\n    startX,\r\n    startY,\r\n    toMin,\r\n    originDate,\r\n}: {\r\n    startX: number;\r\n    startY: number;\r\n    toMin: (y: number) => number;\r\n    toDay: (x: number) => number;\r\n    originDate: Date;\r\n}) => moment(originDate).add(startX, 'days').add(toMin(startY), 'minutes');","/* eslint-disable prettier/prettier */\r\nimport { Events } from '../components/WeekScheduler/WeekScheduler';\r\n\r\nexport function mergeEvents(\r\n  event1: Events | undefined,\r\n  event2: Events | null,\r\n): Events {\r\n\r\n  if (!event1) {\r\n    return {};\r\n  }\r\n\r\n  if (event2 === null) {\r\n    return event1;\r\n  }\r\n\r\n  return {...event1, ...event2 };\r\n}","/* eslint-disable prettier/prettier */\r\nimport React, { memo } from 'react'\r\nimport { CellInfo, DateRange, Grid } from '../../types';\r\nimport { ClosedDaysTimes, Hours } from '../WeekScheduler/WeekScheduler';\r\nimport styles from '../WeekScheduler/WeekScheduler.module.css'\r\n\r\ninterface BoundsProps {\r\n    grid: Grid;\r\n    dateRangeToCells: (range: DateRange) => CellInfo[];\r\n    hours?: Hours;\r\n    closedDaysTimes?: ClosedDaysTimes;\r\n    startOfWeek: moment.Moment;\r\n}\r\n\r\nconst Bounds: React.FC<BoundsProps> = ({\r\n    grid,\r\n    hours,\r\n    closedDaysTimes,\r\n    dateRangeToCells,\r\n    startOfWeek\r\n}) => {\r\n    \r\n    return (\r\n        <div className={styles.bounds}>\r\n            {closedDaysTimes && closedDaysTimes.map((cdt, cdtIndex) => (\r\n            <span className={styles[\"closed-day-time-container\"]} key={cdtIndex}>\r\n            {dateRangeToCells(cdt).map((cell, cellIndex, cellArray) => {\r\n                    const { left, top, width, height } = grid.getRectFromCell(cell);\r\n\r\n                    return <div \r\n                        className={`${styles[\"bound-box\"]} ${styles[\"closed-day-time\"]}`} \r\n                        style={{left, top, width, height}}\r\n                        key={`${cellIndex}.${cellArray.length}`}\r\n                    />})}\r\n            </span>)\r\n            )}\r\n\r\n            {hours && Object.entries(hours).map(h => (\r\n            <span className={styles[\"hours-container\"]} key={h[0]}>\r\n\r\n            {dateRangeToCells([startOfWeek.clone().add(h[0], 'days').startOf('day').toDate(), startOfWeek.clone().add(h[0], 'days').set({'hour':h[1][0].getHours(), 'minute':h[1][0].getMinutes(), 'second':h[1][0].getSeconds()}).toDate()]).map((cell, cellIndex, cellArray) => {\r\n                const { left, top, width, height } = grid.getRectFromCell(cell);\r\n\r\n                return <div \r\n                    className={`${styles[\"bound-box\"]} ${styles.hours}`}\r\n                    style={{left, top, width, height}}\r\n                    key={`start.${h[0]}.${cellIndex}.${cellArray.length}`}\r\n                />})}\r\n            {dateRangeToCells([startOfWeek.clone().add(h[0], 'days').set({'hour':h[1][1].getHours(), 'minute':h[1][1].getMinutes(), 'second':h[1][1].getSeconds()}).toDate(), startOfWeek.clone().add(h[0], 'days').endOf('day').toDate()]).map((cell, cellIndex, cellArray) => {\r\n                const { left, top, width, height } = grid.getRectFromCell(cell);\r\n\r\n                return <div \r\n                    className={`${styles[\"bound-box\"]} ${styles.hours}`} \r\n                    style={{left, top, width, height}}\r\n                    key={`end.${h[0]}.${cellIndex}.${cellArray.length}`}\r\n                />})}\r\n            \r\n            </span>)\r\n            )}\r\n        </div>);\r\n}\r\n\r\nexport default memo(Bounds);","/* eslint-disable prettier/prettier */\r\nimport React, {\r\n  useState,\r\n  useEffect,\r\n  useRef,\r\n  useMemo,\r\n  useCallback,\r\n  memo,\r\n} from \"react\";\r\nimport moment from \"moment\";\r\nimport isEqual from 'date-fns/isEqual'\r\nimport invariant from 'invariant';\r\nimport styles from './WeekScheduler.module.css'\r\nimport { Cell } from \"../Cell/Cell\";\r\nimport { CellInfo, DateRange, Grid, OnChangeCallback } from \"../../types\";\r\nimport { createGrid } from \"../../utils/createGrid\";\r\nimport Schedule, { SharedScheduleProps } from \"../Schedule/Schedule\";\r\nimport { createMapDateRangeToCells } from \"../../utils/createMapDateRangeToCells\";\r\nimport {\r\n  createMapCellInfoToRecurringTimeRange,\r\n} from \"../../utils/createMapCellInfoToRecurringTimeRange\";\r\nimport { getSpan } from \"../../utils/getSpan\";\r\nimport { mergeEvents } from \"../../utils/mergeEvents\";\r\nimport isWithinInterval from \"date-fns/isWithinInterval\";\r\n// import { useClickAndDrag } from \"../../hooks/useClickAndDrag\";\r\nimport Bounds from \"../Bounds/Bounds\";\r\nimport addHours from \"date-fns/addHours\";\r\nimport { getEarliestTimeRange } from \"../../utils/getEarliestTimeRange\";\r\nimport scrollIntoView from \"scroll-into-view-if-needed\";\r\nimport useComponentSize from \"@rehooks/component-size\";\r\n\r\nexport type Hours = {[id:number]: DateRange}\r\nexport type ClosedDaysTimes = DateRange[];\r\n\r\nexport type EventDetails = { range: DateRange; title?: string; desc?: string };\r\nexport type Events = { [id: string]: EventDetails };\r\n\r\ninterface WeekSchedulerProps {\r\n  originDate?: Date;\r\n  /**\r\n   * The height of the container for the whole scheduler. If not set, it will be 100vh.\r\n   */\r\n  height?: string;\r\n  /**\r\n   * The width of the container for the whole scheduler. If not set, it will be 100%.\r\n   */\r\n  width?: string;\r\n  /**\r\n   * The cell height. If not set, it will be computed based on the available height.\r\n   */\r\n  cellHeight?: number;\r\n  /**\r\n   * The cell width. If not set, it will be computed based on the available width.\r\n   */\r\n  cellWidth?: number;\r\n  /**\r\n   * The visual grid increments in minutes.\r\n   * @default 120\r\n   */\r\n  visualGridVerticalPrecision?: number;\r\n\r\n  /**\r\n   * The minimum number of minutes a created range can span\r\n   * @default 15\r\n   */\r\n  verticalPrecision?: number;\r\n\r\n  /**\r\n   * The minimum number of minutes for an time block\r\n   * created with a single click.\r\n   * @default visualGridVerticalPrecision\r\n   */\r\n  cellClickPrecision?: number;\r\n\r\n  /**\r\n   * The maximum number of minutes a createed range could be span.\r\n   * If not provided it will be the number of minutes in a day.\r\n   */\r\n   maxVerticalPrecision?: number;\r\n\r\n  /**\r\n   * Events that could be moved around\r\n   */\r\n  dynamicEvents: Events;\r\n  /**\r\n   * Events that can't be moved but take up space and prevent other events from moving to their location\r\n   */\r\n  staticEvents: Events;\r\n  /**\r\n   * The view will initially be scrolled to these hours.\r\n   * Defaults to work hours (9-17).\r\n   * @default [9, 17]\r\n   */\r\n  defaultHours?: [number, number];\r\n  onChangeStaticEvents: (newEvents: Events) => void;\r\n  onChangeDynamicEvents: (newEvents: Events) => void;\r\n  onEventClick?: SharedScheduleProps['onClick'];\r\n  newEventsAddedTo: \"static\" | \"dynamic\" | \"none\";\r\n  eventsOverlap?: boolean;\r\n  disableDelete?: boolean;\r\n  eventContentComponent?: SharedScheduleProps['eventContentComponent'];\r\n  eventRootComponent?: SharedScheduleProps['eventRootComponent'];\r\n  generateEvent: (eventDetails: EventDetails) => Events;\r\n  hours?: Hours;\r\n  closedDaysTimes?: ClosedDaysTimes;\r\n}\r\n\r\nexport const daysOfWeek = [0, 1, 2, 3, 4, 5, 6];\r\nconst NumberOfMinutesInADay = 24 * 60;\r\nconst horizontalPrecision = 1;\r\nconst toDay = (x: number): number => x * horizontalPrecision;\r\nconst toX = (days: number): number => days / horizontalPrecision;\r\n\r\nconst WeekScheduler: React.FC<WeekSchedulerProps> = ({\r\n  originDate = new Date(),\r\n  width,\r\n  height,\r\n  cellWidth,\r\n  cellHeight,\r\n  visualGridVerticalPrecision = 120,\r\n  verticalPrecision = 15,\r\n  defaultHours = [9, 17],\r\n  maxVerticalPrecision = NumberOfMinutesInADay,\r\n  cellClickPrecision = visualGridVerticalPrecision,\r\n  dynamicEvents,\r\n  staticEvents,\r\n  onChangeStaticEvents,\r\n  onChangeDynamicEvents,\r\n  newEventsAddedTo,\r\n  eventsOverlap,\r\n  disableDelete,\r\n  generateEvent,\r\n  hours,\r\n  closedDaysTimes,\r\n  onEventClick,\r\n  eventContentComponent,\r\n  eventRootComponent,\r\n}) => {\r\n\r\n\r\n  \r\n  const numVerticalCells = NumberOfMinutesInADay / verticalPrecision;\r\n  const numHorizontalCells = 7 / horizontalPrecision;\r\n  const numVisualVerticalCells =\r\n    NumberOfMinutesInADay / visualGridVerticalPrecision;\r\n  const times: number[] = [];\r\n  const schedulerRef = useRef<HTMLDivElement>(null);\r\n  const parentRef = useRef<HTMLDivElement>(null);\r\n  const root = useRef<HTMLDivElement>(null);\r\n  const [[totalHeight, totalWidth], setDimensions] = useState([0, 0]);\r\n\r\n  const size = useComponentSize(parentRef);\r\n\r\n  // const {\r\n  //   style: dragBoxStyle,\r\n  //   box,\r\n  //   isDragging,\r\n  //   hasFinishedDragging,\r\n  //   cancel,\r\n  // } = useClickAndDrag(parentRef, newEventsAddedTo === 'none');\r\n\r\n  const toMin = useCallback(\r\n    (y: number) =>\r\n      (y * verticalPrecision) /\r\n      (verticalPrecision / visualGridVerticalPrecision),\r\n    [verticalPrecision, visualGridVerticalPrecision]\r\n  );\r\n  const toY = useCallback(\r\n    (mins: number): number =>\r\n      (mins / verticalPrecision) *\r\n      (verticalPrecision / visualGridVerticalPrecision),\r\n    [verticalPrecision, visualGridVerticalPrecision]\r\n  );\r\n\r\n\r\n\r\n  // const [pendingCreation, setPendingCreation] =\r\n  //   useState<Events | null>(null);\r\n\r\n\r\n  for (let i = 0; i < numVisualVerticalCells; i++) {\r\n    times.push(i);\r\n  }\r\n\r\n\r\n\r\n  useEffect(\r\n    function updateGridDimensionsOnSizeOrCellCountChange() {\r\n      if (!schedulerRef.current) {\r\n        setDimensions([0, 0]);\r\n        return;\r\n      }\r\n\r\n      setDimensions([schedulerRef.current.clientHeight, schedulerRef.current.clientWidth]);\r\n    },\r\n    [size, numVisualVerticalCells],\r\n  );\r\n\r\n\r\n\r\n  const startOfWeek = useMemo(\r\n    () => moment(originDate).clone().startOf(\"week\"),\r\n    [originDate]\r\n  );\r\n  const endOfWeek = moment(originDate).clone().endOf(\"week\");\r\n\r\n  // originDate is set to the startOfWeek not just some arbitrary date passed by the user\r\n  // this will make it easier to figure out the position of the date range horizontally\r\n  // as originDate is mainly used to calculate the x position\r\n\r\n  // numVerticalCells is set as the numVisualVeritcal cells because the ranges need to be\r\n  // positioned relative to the visual vertical cells not the vertical cells\r\n  const dateRangeToCells = useMemo(() => {\r\n    return createMapDateRangeToCells({\r\n      originDate: startOfWeek.toDate(),\r\n      numVerticalCells: numVisualVerticalCells,\r\n      numHorizontalCells,\r\n      toX,\r\n      toY,\r\n    });\r\n  }, [toY, numVisualVerticalCells, numHorizontalCells, startOfWeek]);\r\n\r\n  const cellInfoToDateRanges = useMemo(() => {\r\n    return createMapCellInfoToRecurringTimeRange({\r\n      originDate: startOfWeek.toDate(),\r\n      fromY: toMin,\r\n      fromX: toDay,\r\n    });\r\n  }, [toMin, startOfWeek]);\r\n\r\n  const cellInfoToSingleDateRange = useCallback(\r\n    (cell: CellInfo): DateRange => {\r\n      const [first, ...rest] = cellInfoToDateRanges(cell);\r\n      invariant(\r\n        rest.length === 0,\r\n        `Expected \"cellInfoToSingleDateRange\" to return a single date range, found ${\r\n          rest.length\r\n        } additional ranges instead. ${JSON.stringify(first)} - ${JSON.stringify(rest)}`,\r\n      );\r\n\r\n      return first;\r\n    },\r\n    [cellInfoToDateRanges],\r\n  );\r\n\r\n \r\n\r\n\r\n  const maxRangeHeightSpan = useMemo(() => { \r\n    \r\n    return toY(maxVerticalPrecision);\r\n    \r\n  }, [toY, maxVerticalPrecision]);\r\n\r\n\r\n  const grid = useMemo<Grid | null>(() => {\r\n    if (totalHeight === null || totalWidth === null) {\r\n      return null;\r\n    }\r\n\r\n    return createGrid({\r\n      totalHeight: cellHeight? cellHeight * numVisualVerticalCells: totalHeight,\r\n      totalWidth: cellWidth? cellWidth * numHorizontalCells: totalWidth,\r\n      numHorizontalCells,\r\n      numVerticalCells,\r\n      numVisualVerticalCells,\r\n      maxRangeHeightSpan,\r\n    });\r\n  }, [totalHeight, totalWidth, numHorizontalCells, numVerticalCells, numVisualVerticalCells, maxRangeHeightSpan, cellHeight, cellWidth]);\r\n\r\n\r\n\r\n\r\n  const checkValidDateRange = useCallback((id: string, dateRange: DateRange) => {\r\n    console.log('checking valid date');\r\n    // check if within hours\r\n    const dayOfWeek = dateRange[0].getDay();\r\n\r\n    if (hours && hours[dayOfWeek]){\r\n      const start = hours[dayOfWeek][0];\r\n      const end = hours[dayOfWeek][1];\r\n      start.setFullYear(dateRange[0].getFullYear(), dateRange[0].getMonth(), dateRange[0].getDate());\r\n      end.setFullYear(dateRange[0].getFullYear(), dateRange[0].getMonth(), dateRange[0].getDate());\r\n      if (!isWithinInterval(dateRange[0], { start, end }) || !isWithinInterval(dateRange[1], { start, end })){\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (closedDaysTimes){\r\n      for(let i = 0; i < closedDaysTimes.length; i++){\r\n        const closedDayTime = closedDaysTimes[i];\r\n        const start = closedDayTime[0];\r\n        const end = closedDayTime[1];\r\n        if (moment(dateRange[0]).isBetween(start, end, undefined, \"()\") ||\r\n        moment(dateRange[1]).isBetween(start, end, undefined, \"()\")){\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!eventsOverlap){\r\n      const allEvents : EventDetails[] = [];\r\n      if (dynamicEvents){\r\n       allEvents.push(...Object.entries(dynamicEvents).filter(value => value[0] !== id).map(value => value[1]));\r\n      }\r\n      if (staticEvents){\r\n        allEvents.push(...Object.entries(staticEvents).filter(value => value[0] !== id).map(value => value[1]));\r\n      }\r\n      for(let i = 0; i < allEvents.length; i++){\r\n        const { range:[start, end] } = allEvents[i];\r\n        if (moment(dateRange[0]).isBetween(start, end, undefined, \"()\") ||\r\n        moment(dateRange[1]).isBetween(start, end, undefined, \"()\")){\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }, [hours, closedDaysTimes, dynamicEvents, staticEvents, eventsOverlap]);\r\n\r\n  // useEffect(\r\n  //   function updatePendingCreationOnDragBoxUpdate() {\r\n  //     if (grid === null || box === null) {\r\n  //       setPendingCreation(null);\r\n  //       return;\r\n  //     }\r\n      \r\n  //     const cell = grid.getCellFromRect(box, true);\r\n      \r\n  //     const dateRanges = cellInfoToDateRanges(cell);\r\n\r\n  //     let events : Events = {};\r\n\r\n  //     dateRanges.forEach(dateRange => { \r\n  //       if (checkValidDateRange(\"\", dateRange))\r\n  //         events = {...events, ...generateEvent({ range: dateRange })}\r\n  //     });\r\n\r\n  //     setPendingCreation(events);\r\n  //   },\r\n  //   [box, grid, cellInfoToDateRanges, toY, generateEvent, checkValidDateRange],\r\n  // );\r\n\r\n  const [[activeRangeId, activeCellIndex], setActive] = useState<\r\n    [string, number] | [null, null]\r\n  >([null, null]);\r\n\r\n  // useEffect(\r\n  //   function updateScheduleAfterDraggingFinished() {\r\n  //     // if (newEventsAddedTo === 'none') { // for some reason when you change newEventsAddedTo to none this code makes all events disappear\r\n  //     //   return;\r\n  //     // }\r\n\r\n  //     if (hasFinishedDragging) {\r\n  //       if (newEventsAddedTo === 'dynamic')\r\n  //         onChangeDynamicEvents(mergeEvents(dynamicEvents, pendingCreation));\r\n\r\n  //       if (newEventsAddedTo === 'static')\r\n  //         onChangeStaticEvents(mergeEvents(staticEvents, pendingCreation));\r\n  //       setPendingCreation(null);\r\n  //     }\r\n  //   },\r\n  //   [\r\n  //     hasFinishedDragging,\r\n  //     newEventsAddedTo,\r\n  //     onChangeDynamicEvents,\r\n  //     onChangeStaticEvents,\r\n  //     setPendingCreation,\r\n  //     pendingCreation,\r\n  //     staticEvents,\r\n  //     dynamicEvents\r\n  //   ],\r\n  // );\r\n\r\n  // useEffect(\r\n  //   function clearActiveBlockAfterCreation() {\r\n  //     if (pendingCreation === null) {\r\n  //       setActive([null, null]);\r\n  //     }\r\n  //   },\r\n  //   [pendingCreation],\r\n  // );\r\n\r\n  const handleEventChange = useCallback<OnChangeCallback>(\r\n    (newEventDetails, id) => {\r\n\r\n      if (!dynamicEvents && newEventDetails) {\r\n        onChangeDynamicEvents({[id]: newEventDetails});\r\n        return;\r\n      }\r\n\r\n      const newEvents = {...dynamicEvents};\r\n\r\n      if (!newEventDetails) {\r\n        delete newEvents[id];\r\n      } else {\r\n        if (\r\n          isEqual(newEventDetails.range[0], newEvents[id].range[0]) &&\r\n          isEqual(newEventDetails.range[1], newEvents[id].range[1])\r\n        ) {\r\n          return;\r\n        }\r\n        newEvents[id] = newEventDetails;\r\n\r\n      }\r\n\r\n      onChangeDynamicEvents(newEvents);\r\n    },\r\n    [dynamicEvents, onChangeDynamicEvents],\r\n  );\r\n\r\n  const getIsActive = useCallback(\r\n    ({ rangeId, cellIndex }) => {\r\n      return rangeId === activeRangeId && cellIndex === activeCellIndex;\r\n    },\r\n    [activeCellIndex, activeRangeId],\r\n  );\r\n\r\n\r\n  // useEffect(\r\n  //   function cancelPendingCreationOnSizeChange() {\r\n  //     cancel();\r\n  //   },\r\n  //   [size, cancel],\r\n  // );\r\n\r\n  useEffect(\r\n    function scrollToActiveTimeBlock() {\r\n      if (!document.activeElement) {\r\n        return;\r\n      }\r\n\r\n      if (!root.current || !root.current.contains(document.activeElement)) {\r\n        return;\r\n      }\r\n\r\n      scrollIntoView(document.activeElement, {\r\n        scrollMode: 'if-needed',\r\n        block: 'nearest',\r\n        inline: 'nearest',\r\n      });\r\n    },\r\n    [staticEvents, dynamicEvents],\r\n  );\r\n\r\n  \r\n  const [wasInitialScrollPerformed, setWasInitialScrollPerformed] = useState(\r\n    false,\r\n  );\r\n\r\n  useEffect(\r\n    function performInitialScroll() {\r\n      if (wasInitialScrollPerformed || !root.current || !grid) {\r\n        return;\r\n      }\r\n\r\n      const range = dateRangeToCells(\r\n        getEarliestTimeRange({...dynamicEvents,...staticEvents}) || [\r\n          addHours(originDate, defaultHours[0]),\r\n          addHours(originDate, defaultHours[1]),\r\n        ],\r\n      );\r\n      const rect = grid.getRectFromCell(range[0]);\r\n      const { top, bottom } = rect;\r\n\r\n      if (top === 0 && bottom === 0) {\r\n        return;\r\n      }\r\n\r\n      // IE, Edge do not support it\r\n      if (!('scrollBy' in root.current)) {\r\n        return;\r\n      }\r\n\r\n      root.current.scrollBy(0, top);\r\n\r\n      setWasInitialScrollPerformed(true);\r\n    },\r\n    [\r\n      wasInitialScrollPerformed,\r\n      grid,\r\n      staticEvents,\r\n      dynamicEvents,\r\n      defaultHours,\r\n      originDate,\r\n      dateRangeToCells,\r\n    ],\r\n  );\r\n\r\n  const handleBlur: React.FocusEventHandler = useCallback(\r\n    event => {\r\n      if (!event.target.contains(document.activeElement)) {\r\n        setActive([null, null]);\r\n      }\r\n    },\r\n    [setActive],\r\n  );\r\n\r\n\r\n  const handleCellClick = useCallback(\r\n    (dayIndex: number, timeIndex: number) => (event: React.MouseEvent) => {\r\n      if (!grid || newEventsAddedTo === \"none\") {\r\n        return;\r\n      }\r\n\r\n      const spanY = toY(cellClickPrecision);\r\n      const precisionedTimeIndex = timeIndex * (verticalPrecision / visualGridVerticalPrecision);\r\n      const cell = {\r\n        startX: dayIndex,\r\n        startY: precisionedTimeIndex,\r\n        endX: dayIndex,\r\n        endY: spanY + precisionedTimeIndex,\r\n        spanY,\r\n        spanX: getSpan(dayIndex, dayIndex),\r\n      };\r\n\r\n      const dateRanges = cellInfoToDateRanges(cell);\r\n\r\n      let events : Events = {};\r\n\r\n      dateRanges.forEach(dateRange => { events = {...events, ...generateEvent({ range: dateRange })}});\r\n\r\n      if (checkValidDateRange(\"\", dateRanges[0])){\r\n        // setPendingCreation(events);\r\n\r\n        if (newEventsAddedTo === 'dynamic')\r\n          onChangeDynamicEvents(mergeEvents(dynamicEvents, events));\r\n\r\n        if (newEventsAddedTo === 'static')\r\n          onChangeStaticEvents(mergeEvents(staticEvents, events));\r\n      }\r\n\r\n      event.stopPropagation();\r\n      event.preventDefault();\r\n    },\r\n    [grid, newEventsAddedTo, toY, cellClickPrecision, cellInfoToDateRanges, generateEvent, checkValidDateRange, verticalPrecision, visualGridVerticalPrecision]\r\n  );\r\n\r\n\r\n\r\n  const baseRect = grid?.getRectFromCell({\r\n    startX: 0,\r\n    startY: 0,\r\n    endX: 0,\r\n    endY: 0,\r\n    spanX: 1,\r\n    spanY: 1,\r\n  });\r\n\r\n  return (\r\n    <div className={styles.root} style={{ height, width}}>\r\n      <div className={styles[\"scheduler-header\"]}>\r\n        <div className={styles[\"week-of-indicator\"]}>\r\n          Week of: {startOfWeek.format(\"L\")} - {endOfWeek.format(\"L\")}\r\n        </div>\r\n      </div>\r\n      <div className={styles[\"scheduler-body\"]} onBlur={handleBlur}>\r\n        <div className={styles[\"scheduler-table\"]} ref={root}>\r\n          <div className={styles[\"layer-container\"]} ref={schedulerRef}>\r\n            \r\n            {grid && (\r\n              <Bounds \r\n                dateRangeToCells={dateRangeToCells}\r\n                grid={grid}\r\n                hours={hours}\r\n                closedDaysTimes={closedDaysTimes}\r\n                startOfWeek={startOfWeek}\r\n              />)\r\n            }\r\n            {/* {isDragging && (\r\n              <div className=\"drag-box\" style={dragBoxStyle}>\r\n                {hasFinishedDragging && <div className=\"popup\" />}\r\n              </div>\r\n            )} */}\r\n            {/* {grid && dynamicEvents && pendingCreation && (\r\n              <Schedule\r\n                events={newEventsAddedTo === 'dynamic' ? mergeEvents(dynamicEvents, pendingCreation): dynamicEvents}\r\n                dateRangeToCells={dateRangeToCells}\r\n                grid={grid}\r\n                moveAxis=\"none\"\r\n                cellInfoToDateRange={cellInfoToSingleDateRange}\r\n                checkValidDateRange={checkValidDateRange}\r\n                getIsActive={getIsActive}\r\n                eventContentComponent={eventContentComponent}\r\n                type=\"dynamic\"\r\n                className=\"dynamic is-pending-creation\"\r\n              />\r\n            )} */}\r\n            {grid && dynamicEvents && (\r\n              <Schedule\r\n                events={dynamicEvents}\r\n                isMovable\r\n                dateRangeToCells={dateRangeToCells}\r\n                grid={grid}\r\n                moveAxis=\"both\"\r\n                isResizable\r\n                isDeletable\r\n                cellInfoToDateRange={cellInfoToSingleDateRange}\r\n                onChange={handleEventChange}\r\n                checkValidDateRange={checkValidDateRange}\r\n                onActiveChange={setActive}\r\n                onClick={onEventClick}\r\n                getIsActive={getIsActive}\r\n                disableDelete={disableDelete}\r\n                eventContentComponent={eventContentComponent}\r\n                eventRootComponent={eventRootComponent}\r\n                type=\"dynamic\"\r\n                className={styles.dynamic}\r\n              />\r\n            )}\r\n            {/* {grid && staticEvents && pendingCreation && (\r\n              <Schedule\r\n                events={newEventsAddedTo === 'static' ? mergeEvents(staticEvents, pendingCreation): staticEvents}\r\n                dateRangeToCells={dateRangeToCells}\r\n                grid={grid}\r\n                moveAxis=\"none\"\r\n                cellInfoToDateRange={cellInfoToSingleDateRange}\r\n                checkValidDateRange={checkValidDateRange}\r\n                getIsActive={getIsActive}\r\n                eventContentComponent={eventContentComponent}\r\n                type=\"static\"\r\n                className=\"static is-pending-creation\"\r\n              />\r\n            )} */}\r\n            {grid && staticEvents && (\r\n              <Schedule\r\n                events={staticEvents}\r\n                dateRangeToCells={dateRangeToCells}\r\n                grid={grid}\r\n                moveAxis=\"none\"\r\n                cellInfoToDateRange={cellInfoToSingleDateRange}\r\n                checkValidDateRange={checkValidDateRange}\r\n                onActiveChange={setActive}\r\n                onClick={onEventClick}\r\n                getIsActive={getIsActive}\r\n                disableDelete={disableDelete}\r\n                eventContentComponent={eventContentComponent}\r\n                eventRootComponent={eventRootComponent}\r\n                type=\"static\"\r\n                className={styles.static}\r\n              />\r\n            )}\r\n            <div className={styles.calendar} ref={parentRef}>\r\n              {daysOfWeek.map((dayOfWeek) => (\r\n                <div key={dayOfWeek} className={styles[\"day-column\"]}>\r\n                  {times.map((timeIndex) => (\r\n                    <Cell\r\n                      rect={grid?.getRectFromCell({\r\n                        startX: dayOfWeek,\r\n                        startY: timeIndex,\r\n                        endX: dayOfWeek + 1,\r\n                        endY: timeIndex + 1,\r\n                        spanX: 1,\r\n                        spanY: 1,\r\n                      })}\r\n                      key={timeIndex}\r\n                      onClick={handleCellClick(\r\n                        dayOfWeek,\r\n                        timeIndex *\r\n                          (numVerticalCells / numVisualVerticalCells),\r\n                      )}\r\n                      timeIndex={timeIndex}\r\n                    >\r\n                      {/* {dayOfWeek}x{timeIndex} */}\r\n                    </Cell>\r\n                  ))}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          <div className={`${styles.timeline} ${styles[\"sticky-left\"]}`}>\r\n            {times.map((timeIndex) => (\r\n              <div\r\n                className={styles[\"day-hour\"]}\r\n                style={{ height: baseRect?.height }}\r\n                key={timeIndex}\r\n              >\r\n                <div className={styles[\"time-label\"]}>\r\n                  {moment()\r\n                    .hours(0)\r\n                    .minutes(timeIndex * visualGridVerticalPrecision)\r\n                    .format(\"HH:mm\")}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div className={`${styles[\"day-labels\"]} ${styles[\"sticky-top\"]}`}>\r\n            <div className={styles.header}>\r\n              <div className={styles[\"sticky-left\"]} />\r\n\r\n              {daysOfWeek.map((dayOfWeek) => (\r\n                <div\r\n                  key={dayOfWeek}\r\n                  className={styles[\"day-column\"]}\r\n                  style={{ width: baseRect?.width }}\r\n                >\r\n                  {startOfWeek.clone().add(dayOfWeek, \"d\").format(\"ddd. DD\")}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(WeekScheduler);\r\n","/* eslint-disable prettier/prettier */\r\nimport moment from 'moment';\r\nimport { CellInfo, DateRange } from '../types';\r\nimport { getSpan } from './getSpan';\r\nimport { differenceInDays, differenceInMinutes, range } from './utility';\r\n\r\nexport const createMapDateRangeToCells = ({\r\n  toX = (x: number) => x,\r\n  toY,\r\n  numVerticalCells,\r\n  originDate,\r\n}: {\r\n  toX: (day: number) => number;\r\n  toY: (min: number) => number;\r\n  numHorizontalCells: number;\r\n  numVerticalCells: number;\r\n  originDate: Date;\r\n}) => ([start, end]: DateRange): CellInfo[] => {\r\n  const originOfThisDay = moment(start).startOf('day');\r\n  // origin date will always be the start of the week\r\n\r\n  // difference in days will always compare the start of the days at 12:00am\r\n  const _startX = toX(differenceInDays(start, originDate));\r\n  const _startY = toY(differenceInMinutes(start, originOfThisDay.toDate()));\r\n  const _endX = toX(differenceInDays(end, originDate));\r\n  const _endY = toY(differenceInMinutes(end, moment(end).startOf('day').toDate())) - 1;\r\n\r\n  let cells = range(_startX, _endX + 1).map(i => {\r\n    const startX = i;\r\n    const endX = i;\r\n    const atStart = i === _startX;\r\n    const atEnd = i === _endX;\r\n    const startY = !atStart ? 0 : _startY;\r\n    const endY = !atEnd ? numVerticalCells - 1 : _endY;\r\n    const spanX = getSpan(startX, endX);\r\n    const spanY = getSpan(startY, endY);\r\n\r\n    return {\r\n      startX,\r\n      startY,\r\n      endX,\r\n      endY,\r\n      spanX,\r\n      spanY,\r\n    };\r\n  });\r\n\r\n  if (moment(end).isSame(moment(end).startOf('day'))) {\r\n    cells.pop();\r\n  }\r\n\r\n\r\n  // filter the cells that are between the 0 days from the originDate (start of week) and 6 days\r\n  cells = cells.filter(({ startX, endX }) => (startX >= 0 && startX <= 6) && (endX >= 0 && endX <= 6));\r\n\r\n  return cells;\r\n};\r\n","/* eslint-disable prettier/prettier */\r\nimport compareAsc from 'date-fns/compareAsc';\r\nimport setDay from 'date-fns/setDay';\r\nimport { Events } from '../components/WeekScheduler/WeekScheduler';\r\nimport { DateRange } from '../types';\r\n\r\nexport function getEarliestTimeRange(\r\n  events: Events,\r\n): DateRange | undefined {\r\n  return Object.values(events).map(ed => ed.range).sort(([startA], [startB]) =>\r\n    compareAsc(setDay(startA, 0), setDay(startB, 0)),\r\n  )[0];\r\n}\r\n","import Tippy from '@tippyjs/react'\nimport moment from 'moment'\nimport React, { useMemo, useState } from 'react'\nimport 'tippy.js/dist/tippy.css';\nimport './App.css'\n\nimport {\n  clampWrapInclusive,\n  ClosedDaysTimes,\n  DefaultEventRootComponent,\n  EventContentProps,\n  EventDetails,\n  EventRootProps,\n  Events,\n  Hours,\n  WeekScheduler\n} from 'react-week-schedulr'\nimport 'react-week-schedulr/dist/index.css'\n\nconst EventRoot = React.forwardRef<any, EventRootProps>(function EventRoot(\n  { handleDelete, disableDelete, type, ...props },\n  ref\n) {\n  return (\n    <Tippy\n      arrow\n      interactive\n      disabled={disableDelete || type === 'static'}\n      hideOnClick={false}\n      className='tooltip'\n      content={\n        <button disabled={disableDelete} onClick={handleDelete}>\n          Delete\n        </button>\n      }\n    >\n      <DefaultEventRootComponent\n        handleDelete={handleDelete}\n        disableDelete={disableDelete}\n        type={type}\n        {...props}\n        ref={ref}\n      />\n    </Tippy>\n  )\n})\n\nconst renderContent = ({ details, dateRange, type }: EventContentProps) => {\n  return (\n    <div className='event-content' style={{ textAlign: 'center' }}>\n      {' '}\n      {/* give className of event-content for padding */}\n      {type === 'static' ? (\n        <>Can't view details</>\n      ) : (\n        <>\n          {details.title ? details.title : 'No Title'}\n          <div>\n            {moment(dateRange[0]).format('lll')} -{' '}\n            {moment(dateRange[1]).format('lll')}\n          </div>\n        </>\n      )}\n    </div>\n  )\n}\n\nconst generateEvent = (eventDetails: EventDetails): Events => {\n  const id = String(Math.random())\n  return { [id]: { ...eventDetails, title: 'newEvent ' + id } }\n}\n\nconst initialDynamicEvents: Events = {\n  '1': { range: [new Date(2021, 8, 22, 12), new Date(2021, 8, 22, 13)] },\n  '2': {\n    range: [new Date(2021, 8, 23, 14), new Date(2021, 8, 24, 15)],\n    title: 'work time'\n  }\n}\n\nconst initialStaticEvents: Events = {\n  '3': {\n    range: [new Date(2021, 8, 23, 3), new Date(2021, 8, 23, 5)],\n    title: 'break time static'\n  },\n  '4': {\n    range: [new Date(2021, 8, 23, 6), new Date(2021, 8, 23, 8)],\n    title: 'work time static'\n  }\n}\n\nconst hours: Hours = {\n  2: [new Date(2021, 7, 23, 3), new Date(2021, 7, 23, 16)]\n}\n\nconst closedDaysTimes: ClosedDaysTimes = [\n  [new Date(2021, 8, 20, 3), new Date(2021, 8, 20, 16)]\n]\n\nconst weeks = [0, 1, 2, 3, 4]\nconst originDate = new Date(2021, 8, 23)\n\nconst App = () => {\n  const [currentYear, setCurrentYear] = useState(originDate.getFullYear())\n  const [currentMonth, setCurrentMonth] = useState(originDate.getMonth())\n  const [currentWeek, setCurrentWeek] = useState(\n    Math.ceil(\n      (originDate.getDate() + new Date(currentYear, currentMonth, 1).getDay()) /\n        7\n    ) - 1\n  )\n\n  const [events, setEvents] = useState(initialDynamicEvents)\n  const [staticEvents, setStaticEvents] = useState<Events>(initialStaticEvents)\n\n  const addMonth = (amount: 1 | -1) => {\n    if (currentMonth === 11 && amount === 1)\n      setCurrentYear((current) => current + 1)\n    if (currentMonth === 0 && amount === -1)\n      setCurrentYear((current) => current - 1)\n    setCurrentMonth((current) => clampWrapInclusive(current + amount, 0, 11))\n    setCurrentWeek(0)\n  }\n\n  const originDay = useMemo(() => {\n    const startDayOfMonth = moment(new Date(currentYear, currentMonth, 1))\n    return startDayOfMonth.add(currentWeek, 'w').toDate()\n  }, [currentYear, currentMonth, currentWeek])\n  return (\n    <div className='App'>\n      <div className='scheduler-year'>\n        <button className='month-button' onClick={() => addMonth(-1)}>\n          {' '}\n          {'<'}{' '}\n        </button>\n        <span>\n          {moment(new Date(currentYear, currentMonth)).format(\"MMM' YYYY\")}\n        </span>\n        <button className='month-button' onClick={() => addMonth(1)}>\n          {' '}\n          {'>'}{' '}\n        </button>\n      </div>\n      <div className='week-navigator'>\n        {weeks.map((element, index) => (\n          <button\n            key={element}\n            onClick={() => setCurrentWeek(index)}\n            className={`week-indicator ${\n              currentWeek === index ? 'current' : ''\n            }`}\n          />\n        ))}\n      </div>\n      <WeekScheduler\n        // cellWidth={150}\n        // width=\"100%\"\n        cellHeight={100}\n        height='710px'\n        dynamicEvents={events}\n        onChangeDynamicEvents={setEvents}\n        staticEvents={staticEvents}\n        onChangeStaticEvents={setStaticEvents}\n        newEventsAddedTo='dynamic'\n        generateEvent={generateEvent}\n        cellClickPrecision={120}\n        hours={hours}\n        closedDaysTimes={closedDaysTimes}\n        eventsOverlap\n        eventRootComponent={EventRoot}\n        eventContentComponent={renderContent}\n        maxVerticalPrecision={360}\n        verticalPrecision={5}\n        visualGridVerticalPrecision={120}\n        originDate={originDay}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}